(function(){var n=this,t=n._,r={},e=Array.prototype,u=Object.prototype,i=Function.prototype,a=e.push,o=e.slice,c=e.concat,l=u.toString,f=u.hasOwnProperty,s=e.forEach,p=e.map,v=e.reduce,h=e.reduceRight,g=e.filter,d=e.every,m=e.some,y=e.indexOf,b=e.lastIndexOf,x=Array.isArray,_=Object.keys,j=i.bind,w=function(n){return n instanceof w?n:this instanceof w?(this._wrapped=n,void 0):new w(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=w),exports._=w):n._=w,w.VERSION="1.4.3";var A=w.each=w.forEach=function(n,t,e){if(null!=n)if(s&&n.forEach===s)n.forEach(t,e);else if(n.length===+n.length){for(var u=0,i=n.length;i>u;u++)if(t.call(e,n[u],u,n)===r)return}else for(var a in n)if(w.has(n,a)&&t.call(e,n[a],a,n)===r)return};w.map=w.collect=function(n,t,r){var e=[];return null==n?e:p&&n.map===p?n.map(t,r):(A(n,function(n,u,i){e[e.length]=t.call(r,n,u,i)}),e)};var O="Reduce of empty array with no initial value";w.reduce=w.foldl=w.inject=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),v&&n.reduce===v)return e&&(t=w.bind(t,e)),u?n.reduce(t,r):n.reduce(t);if(A(n,function(n,i,a){u?r=t.call(e,r,n,i,a):(r=n,u=!0)}),!u)throw new TypeError(O);return r},w.reduceRight=w.foldr=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),h&&n.reduceRight===h)return e&&(t=w.bind(t,e)),u?n.reduceRight(t,r):n.reduceRight(t);var i=n.length;if(i!==+i){var a=w.keys(n);i=a.length}if(A(n,function(o,c,l){c=a?a[--i]:--i,u?r=t.call(e,r,n[c],c,l):(r=n[c],u=!0)}),!u)throw new TypeError(O);return r},w.find=w.detect=function(n,t,r){var e;return E(n,function(n,u,i){return t.call(r,n,u,i)?(e=n,!0):void 0}),e},w.filter=w.select=function(n,t,r){var e=[];return null==n?e:g&&n.filter===g?n.filter(t,r):(A(n,function(n,u,i){t.call(r,n,u,i)&&(e[e.length]=n)}),e)},w.reject=function(n,t,r){return w.filter(n,function(n,e,u){return!t.call(r,n,e,u)},r)},w.every=w.all=function(n,t,e){t||(t=w.identity);var u=!0;return null==n?u:d&&n.every===d?n.every(t,e):(A(n,function(n,i,a){return(u=u&&t.call(e,n,i,a))?void 0:r}),!!u)};var E=w.some=w.any=function(n,t,e){t||(t=w.identity);var u=!1;return null==n?u:m&&n.some===m?n.some(t,e):(A(n,function(n,i,a){return u||(u=t.call(e,n,i,a))?r:void 0}),!!u)};w.contains=w.include=function(n,t){return null==n?!1:y&&n.indexOf===y?-1!=n.indexOf(t):E(n,function(n){return n===t})},w.invoke=function(n,t){var r=o.call(arguments,2);return w.map(n,function(n){return(w.isFunction(t)?t:n[t]).apply(n,r)})},w.pluck=function(n,t){return w.map(n,function(n){return n[t]})},w.where=function(n,t){return w.isEmpty(t)?[]:w.filter(n,function(n){for(var r in t)if(t[r]!==n[r])return!1;return!0})},w.max=function(n,t,r){if(!t&&w.isArray(n)&&n[0]===+n[0]&&65535>n.length)return Math.max.apply(Math,n);if(!t&&w.isEmpty(n))return-1/0;var e={computed:-1/0,value:-1/0};return A(n,function(n,u,i){var a=t?t.call(r,n,u,i):n;a>=e.computed&&(e={value:n,computed:a})}),e.value},w.min=function(n,t,r){if(!t&&w.isArray(n)&&n[0]===+n[0]&&65535>n.length)return Math.min.apply(Math,n);if(!t&&w.isEmpty(n))return 1/0;var e={computed:1/0,value:1/0};return A(n,function(n,u,i){var a=t?t.call(r,n,u,i):n;e.computed>a&&(e={value:n,computed:a})}),e.value},w.shuffle=function(n){var t,r=0,e=[];return A(n,function(n){t=w.random(r++),e[r-1]=e[t],e[t]=n}),e};var F=function(n){return w.isFunction(n)?n:function(t){return t[n]}};w.sortBy=function(n,t,r){var e=F(t);return w.pluck(w.map(n,function(n,t,u){return{value:n,index:t,criteria:e.call(r,n,t,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||void 0===r)return 1;if(e>r||void 0===e)return-1}return n.index<t.index?-1:1}),"value")};var k=function(n,t,r,e){var u={},i=F(t||w.identity);return A(n,function(t,a){var o=i.call(r,t,a,n);e(u,o,t)}),u};w.groupBy=function(n,t,r){return k(n,t,r,function(n,t,r){(w.has(n,t)?n[t]:n[t]=[]).push(r)})},w.countBy=function(n,t,r){return k(n,t,r,function(n,t){w.has(n,t)||(n[t]=0),n[t]++})},w.sortedIndex=function(n,t,r,e){r=null==r?w.identity:F(r);for(var u=r.call(e,t),i=0,a=n.length;a>i;){var o=i+a>>>1;u>r.call(e,n[o])?i=o+1:a=o}return i},w.toArray=function(n){return n?w.isArray(n)?o.call(n):n.length===+n.length?w.map(n,w.identity):w.values(n):[]},w.size=function(n){return null==n?0:n.length===+n.length?n.length:w.keys(n).length},w.first=w.head=w.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:o.call(n,0,t)},w.initial=function(n,t,r){return o.call(n,0,n.length-(null==t||r?1:t))},w.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:o.call(n,Math.max(n.length-t,0))},w.rest=w.tail=w.drop=function(n,t,r){return o.call(n,null==t||r?1:t)},w.compact=function(n){return w.filter(n,w.identity)};var R=function(n,t,r){return A(n,function(n){w.isArray(n)?t?a.apply(r,n):R(n,t,r):r.push(n)}),r};w.flatten=function(n,t){return R(n,t,[])},w.without=function(n){return w.difference(n,o.call(arguments,1))},w.uniq=w.unique=function(n,t,r,e){w.isFunction(t)&&(e=r,r=t,t=!1);var u=r?w.map(n,r,e):n,i=[],a=[];return A(u,function(r,e){(t?e&&a[a.length-1]===r:w.contains(a,r))||(a.push(r),i.push(n[e]))}),i},w.union=function(){return w.uniq(c.apply(e,arguments))},w.intersection=function(n){var t=o.call(arguments,1);return w.filter(w.uniq(n),function(n){return w.every(t,function(t){return w.indexOf(t,n)>=0})})},w.difference=function(n){var t=c.apply(e,o.call(arguments,1));return w.filter(n,function(n){return!w.contains(t,n)})},w.zip=function(){for(var n=o.call(arguments),t=w.max(w.pluck(n,"length")),r=Array(t),e=0;t>e;e++)r[e]=w.pluck(n,""+e);return r},w.object=function(n,t){if(null==n)return{};for(var r={},e=0,u=n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},w.indexOf=function(n,t,r){if(null==n)return-1;var e=0,u=n.length;if(r){if("number"!=typeof r)return e=w.sortedIndex(n,t),n[e]===t?e:-1;e=0>r?Math.max(0,u+r):r}if(y&&n.indexOf===y)return n.indexOf(t,r);for(;u>e;e++)if(n[e]===t)return e;return-1},w.lastIndexOf=function(n,t,r){if(null==n)return-1;var e=null!=r;if(b&&n.lastIndexOf===b)return e?n.lastIndexOf(t,r):n.lastIndexOf(t);for(var u=e?r:n.length;u--;)if(n[u]===t)return u;return-1},w.range=function(n,t,r){1>=arguments.length&&(t=n||0,n=0),r=arguments[2]||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=0,i=Array(e);e>u;)i[u++]=n,n+=r;return i};var I=function(){};w.bind=function(n,t){var r,e;if(n.bind===j&&j)return j.apply(n,o.call(arguments,1));if(!w.isFunction(n))throw new TypeError;return r=o.call(arguments,2),e=function(){if(!(this instanceof e))return n.apply(t,r.concat(o.call(arguments)));I.prototype=n.prototype;var u=new I;I.prototype=null;var i=n.apply(u,r.concat(o.call(arguments)));return Object(i)===i?i:u}},w.bindAll=function(n){var t=o.call(arguments,1);return 0==t.length&&(t=w.functions(n)),A(t,function(t){n[t]=w.bind(n[t],n)}),n},w.memoize=function(n,t){var r={};return t||(t=w.identity),function(){var e=t.apply(this,arguments);return w.has(r,e)?r[e]:r[e]=n.apply(this,arguments)}},w.delay=function(n,t){var r=o.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},w.defer=function(n){return w.delay.apply(w,[n,1].concat(o.call(arguments,1)))},w.throttle=function(n,t){var r,e,u,i,a=0,o=function(){a=new Date,u=null,i=n.apply(r,e)};return function(){var c=new Date,l=t-(c-a);return r=this,e=arguments,0>=l?(clearTimeout(u),u=null,a=c,i=n.apply(r,e)):u||(u=setTimeout(o,l)),i}},w.debounce=function(n,t,r){var e,u;return function(){var i=this,a=arguments,o=function(){e=null,r||(u=n.apply(i,a))},c=r&&!e;return clearTimeout(e),e=setTimeout(o,t),c&&(u=n.apply(i,a)),u}},w.once=function(n){var t,r=!1;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}},w.wrap=function(n,t){return function(){var r=[n];return a.apply(r,arguments),t.apply(this,r)}},w.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length-1;r>=0;r--)t=[n[r].apply(this,t)];return t[0]}},w.after=function(n,t){return 0>=n?t():function(){return 1>--n?t.apply(this,arguments):void 0}},w.keys=_||function(n){if(n!==Object(n))throw new TypeError("Invalid object");var t=[];for(var r in n)w.has(n,r)&&(t[t.length]=r);return t},w.values=function(n){var t=[];for(var r in n)w.has(n,r)&&t.push(n[r]);return t},w.pairs=function(n){var t=[];for(var r in n)w.has(n,r)&&t.push([r,n[r]]);return t},w.invert=function(n){var t={};for(var r in n)w.has(n,r)&&(t[n[r]]=r);return t},w.functions=w.methods=function(n){var t=[];for(var r in n)w.isFunction(n[r])&&t.push(r);return t.sort()},w.extend=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]=t[r]}),n},w.pick=function(n){var t={},r=c.apply(e,o.call(arguments,1));return A(r,function(r){r in n&&(t[r]=n[r])}),t},w.omit=function(n){var t={},r=c.apply(e,o.call(arguments,1));for(var u in n)w.contains(r,u)||(t[u]=n[u]);return t},w.defaults=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)null==n[r]&&(n[r]=t[r])}),n},w.clone=function(n){return w.isObject(n)?w.isArray(n)?n.slice():w.extend({},n):n},w.tap=function(n,t){return t(n),n};var S=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return n===t;n instanceof w&&(n=n._wrapped),t instanceof w&&(t=t._wrapped);var u=l.call(n);if(u!=l.call(t))return!1;switch(u){case"[object String]":return n==t+"";case"[object Number]":return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object RegExp]":return n.source==t.source&&n.global==t.global&&n.multiline==t.multiline&&n.ignoreCase==t.ignoreCase}if("object"!=typeof n||"object"!=typeof t)return!1;for(var i=r.length;i--;)if(r[i]==n)return e[i]==t;r.push(n),e.push(t);var a=0,o=!0;if("[object Array]"==u){if(a=n.length,o=a==t.length)for(;a--&&(o=S(n[a],t[a],r,e)););}else{var c=n.constructor,f=t.constructor;if(c!==f&&!(w.isFunction(c)&&c instanceof c&&w.isFunction(f)&&f instanceof f))return!1;for(var s in n)if(w.has(n,s)&&(a++,!(o=w.has(t,s)&&S(n[s],t[s],r,e))))break;if(o){for(s in t)if(w.has(t,s)&&!a--)break;o=!a}}return r.pop(),e.pop(),o};w.isEqual=function(n,t){return S(n,t,[],[])},w.isEmpty=function(n){if(null==n)return!0;if(w.isArray(n)||w.isString(n))return 0===n.length;for(var t in n)if(w.has(n,t))return!1;return!0},w.isElement=function(n){return!(!n||1!==n.nodeType)},w.isArray=x||function(n){return"[object Array]"==l.call(n)},w.isObject=function(n){return n===Object(n)},A(["Arguments","Function","String","Number","Date","RegExp"],function(n){w["is"+n]=function(t){return l.call(t)=="[object "+n+"]"}}),w.isArguments(arguments)||(w.isArguments=function(n){return!(!n||!w.has(n,"callee"))}),w.isFunction=function(n){return"function"==typeof n},w.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},w.isNaN=function(n){return w.isNumber(n)&&n!=+n},w.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"==l.call(n)},w.isNull=function(n){return null===n},w.isUndefined=function(n){return void 0===n},w.has=function(n,t){return f.call(n,t)},w.noConflict=function(){return n._=t,this},w.identity=function(n){return n},w.times=function(n,t,r){for(var e=Array(n),u=0;n>u;u++)e[u]=t.call(r,u);return e},w.random=function(n,t){return null==t&&(t=n,n=0),n+(0|Math.random()*(t-n+1))};var T={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"}};T.unescape=w.invert(T.escape);var M={escape:RegExp("["+w.keys(T.escape).join("")+"]","g"),unescape:RegExp("("+w.keys(T.unescape).join("|")+")","g")};w.each(["escape","unescape"],function(n){w[n]=function(t){return null==t?"":(""+t).replace(M[n],function(t){return T[n][t]})}}),w.result=function(n,t){if(null==n)return null;var r=n[t];return w.isFunction(r)?r.call(n):r},w.mixin=function(n){A(w.functions(n),function(t){var r=w[t]=n[t];w.prototype[t]=function(){var n=[this._wrapped];return a.apply(n,arguments),z.call(this,r.apply(w,n))}})};var N=0;w.uniqueId=function(n){var t=""+ ++N;return n?n+t:t},w.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var q=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n"," ":"t","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\t|\u2028|\u2029/g;w.template=function(n,t,r){r=w.defaults({},r,w.templateSettings);var e=RegExp([(r.escape||q).source,(r.interpolate||q).source,(r.evaluate||q).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(t,r,e,a,o){return i+=n.slice(u,o).replace(D,function(n){return"\\"+B[n]}),r&&(i+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'"),e&&(i+="'+\n((__t=("+e+"))==null?'':__t)+\n'"),a&&(i+="';\n"+a+"\n__p+='"),u=o+t.length,t}),i+="';\n",r.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var a=Function(r.variable||"obj","_",i)}catch(o){throw o.source=i,o}if(t)return a(t,w);var c=function(n){return a.call(this,n,w)};return c.source="function("+(r.variable||"obj")+"){\n"+i+"}",c},w.chain=function(n){return w(n).chain()};var z=function(n){return this._chain?w(n).chain():n};w.mixin(w),A(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=e[n];w.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!=n&&"splice"!=n||0!==r.length||delete r[0],z.call(this,r)}}),A(["concat","join","slice"],function(n){var t=e[n];w.prototype[n]=function(){return z.call(this,t.apply(this._wrapped,arguments))}}),w.extend(w.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}})}).call(this);
(function() {
  var Node,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Node = (function() {

    Node.TOP_LEFT = 0;

    Node.TOP_RIGHT = 1;

    Node.BOTTOM_LEFT = 2;

    Node.BOTTOM_RIGHT = 3;

    function Node(bounds, depth, maxDepth, maxChildren) {
      this.bounds = bounds;
      this.children = [];
      this.stuckChildren = [];
      this.nodes = [];
      this.depth = depth || 0;
      this.maxDepth = maxDepth || 4;
      this.maxChildren = maxChildren || 4;
    }

    Node.prototype.findIndex = function(item) {
      var b, index, ix, iy, left, top;
      ix = item.position.x;
      iy = item.position.y;
      b = this.bounds;
      left = !(ix > b.x + b.width / 2);
      top = !(iy > b.y + b.height / 2);
      index = Node.TOP_LEFT;
      if (left) {
        if (!top) {
          index = Node.BOTTOM_LEFT;
        }
      } else {
        if (top) {
          index = Node.TOP_RIGHT;
        } else {
          index = Node.BOTTOM_RIGHT;
        }
      }
      return index;
    };

    Node.prototype.insert = function(item) {
      var child, childLength, iheight, index, iwidth, ix, iy, node, _i, _len, _ref;
      if (this.nodes.length) {
        index = this.findIndex(item);
        node = this.nodes[index];
        ix = item.position.x;
        iy = item.position.y;
        iwidth = item.box.width;
        iheight = item.box.height;
        if (ix >= node.bounds.x && ix + iwidth <= node.bounds.x + node.bounds.width && iy >= node.bounds.y && iy + iheight <= node.bounds.y + node.bounds.height) {
          this.nodes[index].insert(item);
        } else {
          this.stuckChildren[this.stuckChildren.length] = item;
        }
        return;
      }
      childLength = this.children.length;
      this.children[childLength] = item;
      if (!(this.depth >= this.maxDepth) && (childLength > this.maxChildren)) {
        this.subdivide();
        _ref = this.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          this.insert(child);
        }
        return this.children.length = 0;
      }
    };

    Node.prototype.retrieve = function(item) {
      var index, out;
      out = [];
      if (this.nodes.length) {
        index = this.findIndex(item);
        out.push.apply(out, this.nodes[index].retrieve(item));
        return out;
      }
      out.push.apply(out, this.stuckChildren);
      out.push.apply(out, this.children);
      return out;
    };

    Node.prototype.getChildren = function() {
      return this.children.concat(this.stuckChildren);
    };

    Node.prototype.subdivide = function() {
      var b_x, b_y, depth, half_height, half_width, x_mid, y_mid;
      depth = this.depth + 1;
      b_x = this.bounds.x;
      b_y = this.bounds.y;
      half_width = (this.bounds.width / 2) | 0;
      half_height = (this.bounds.height / 2) | 0;
      x_mid = b_x + half_width;
      y_mid = b_y + half_height;
      this.nodes[Node.TOP_LEFT] = new Node({
        x: b_x,
        y: b_y,
        width: half_width,
        height: half_height
      }, depth);
      this.nodes[Node.TOP_RIGHT] = new Node({
        x: x_mid,
        y: b_y,
        width: half_width,
        height: half_height
      }, depth);
      this.nodes[Node.BOTTOM_LEFT] = new Node({
        x: b_x,
        y: y_mid,
        width: half_width,
        height: half_height
      }, depth);
      return this.nodes[Node.BOTTOM_RIGHT] = new Node({
        x: x_mid,
        y: y_mid,
        width: half_width,
        height: half_height
      }, depth);
    };

    Node.prototype.clear = function() {
      var node, _i, _len, _ref;
      this.stuckChildren.length = 0;
      this.children.length = 0;
      if (!this.nodes.length) {
        return;
      }
      _ref = this.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        node.clear();
      }
      return this.nodes.length = 0;
    };

    return Node;

  })();

  window.QuadTree = (function() {

    function QuadTree(bounds, maxDepth, maxChildren) {
      this.root = new Node(bounds, 0, maxDepth, maxChildren);
    }

    QuadTree.prototype.insert = function(item) {
      var i, _i, _len, _results;
      if (_.isArray(item)) {
        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          i = item[_i];
          _results.push(this.root.insert(i));
        }
        return _results;
      } else {
        return this.root.insert(item);
      }
    };

    QuadTree.prototype.clear = function() {
      return this.root.clear();
    };

    QuadTree.prototype.retrieve = function(item) {
      return this.root.retrieve(item).slice(0);
    };

    return QuadTree;

  })();

  window.Kona = {};

  Kona.readyQueue = [];

  Kona.isReady = false;

  Kona.gamePaused = false;

  Kona.togglePause = function() {
    var event;
    this.gamePaused = !this.gamePaused;
    event = this.gamePaused ? 'Pause' : 'Resume';
    return Kona.Events.trigger("on" + event);
  };

  Kona.onPause = function(fn) {
    return Kona.Events.bind('onPause', fn);
  };

  Kona.onResume = function(fn) {
    return Kona.Events.bind('onResume', fn);
  };

  Kona.ready = function(callback) {
    if (document.readyState === 'complete') {
      Kona.isReady = true;
    }
    if (Kona.isReady) {
      return callback.call();
    } else {
      return Kona.readyQueue.push(callback);
    }
  };

  Kona.DOMContentLoaded = function() {
    var callback, _i, _len, _ref, _results;
    if (Kona.isReady) {
      return;
    }
    Kona.isReady = true;
    _ref = Kona.readyQueue;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      _results.push(callback.call());
    }
    return _results;
  };

  if (document.readyState !== 'complete') {
    if (document.addEventListener) {
      document.addEventListener('DOMContentLoaded', Kona.DOMContentLoaded, false);
      window.addEventListener('load', Kona.DOMContentLoaded, false);
    } else if (document.attachEvent) {
      document.attachEvent('onreadystatechange', Kona.DOMContentLoaded);
      window.attachEvent('onload', Kona.DOMContentLoaded);
    }
  }

  Kona.Utils = {
    find: function(list, props) {
      if (props == null) {
        props = {};
      }
      return _.where(list, props)[0] || null;
    },
    merge: function(obj1, obj2, overwrite) {
      var key, value;
      if (obj2 == null) {
        obj2 = {};
      }
      if (overwrite == null) {
        overwrite = true;
      }
      for (key in obj2) {
        value = obj2[key];
        if (!(obj1[key] != null) || overwrite) {
          obj1[key] = value;
        }
      }
      return obj1;
    },
    sample: function(items) {
      return items[Math.floor(Math.random() * items.length)];
    }
  };

  window.__k_once = 0;

  window.once = function(fn) {
    if (__k_once === 0) {
      fn();
    }
    return __k_once++;
  };

  window.fail = function() {
    var args, msg;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    msg = args.length === 2 ? "In " + args[0] + ": " + args[1] : args.toString();
    throw new Error(msg);
  };

  window.puts = function(obj) {
    return console.log(obj);
  };

  Kona.Canvas = {
    defaults: {
      width: 720,
      height: 540
    },
    init: function(id) {
      this.elem = document.getElementById(id) || fail("Canvas.init", "Can't find element with id: " + id);
      this.ctx = this.elem.getContext('2d');
      if (this.elem.getAttribute('width') == null) {
        this.elem.width = this.defaults.width;
      }
      if (this.elem.getAttribute('height') == null) {
        this.elem.height = this.defaults.height;
      }
      this.width = this.elem.width;
      return this.height = this.elem.height;
    },
    safe: function(fn) {
      this.ctx.save();
      fn();
      return this.ctx.restore();
    },
    clear: function() {
      var _this = this;
      return this.safe(function() {
        _this.ctx.fillStyle = 'white';
        return _this.ctx.fillRect(0, 0, _this.width, _this.height);
      });
    },
    drawRect: function(position, box, opts) {
      var _this = this;
      if (opts == null) {
        opts = {};
      }
      return this.safe(function() {
        _this.ctx.fillStyle = opts.color || 'black';
        return _this.ctx.fillRect(position.x, position.y, box.width, box.height);
      });
    },
    drawCircle: function(position, opts) {
      var radius,
        _this = this;
      radius = opts.radius || fail("Must specify a radius");
      return this.safe(function() {
        _this.ctx.fillStyle = opts.color || 'black';
        _this.ctx.beginPath();
        _this.ctx.arc(position.x, position.y, radius, 0, 2 * Math.PI, false);
        _this.ctx.closePath();
        return _this.ctx.fill();
      });
    }
  };

  Kona.Engine = {
    defaults: {
      fps: 24,
      width: 660,
      height: 480
    },
    running: false,
    _queue: [],
    queue: function(fn) {
      if (this.running) {
        return fn();
      } else {
        return this._queue.push(fn);
      }
    },
    flushQueue: function() {
      var fn, _results;
      _results = [];
      while (fn = this._queue.shift()) {
        _results.push(fn());
      }
      return _results;
    },
    start: function(opts) {
      var scene;
      if (opts == null) {
        opts = {};
      }
      this.fps = opts.fps || this.defaults.fps;
      scene = Kona.Utils.find(Kona.Scenes.scenes, {
        active: true
      }) || Kona.Scenes.scenes[0];
      Kona.Scenes.currentScene = scene || fail("Engine#start", "No scenes found");
      this.running = true;
      this.flushQueue();
      Kona.Scenes.currentScene.triggerActivation();
      return this.run();
    },
    run: function() {
      requestAnimFrame(Kona.Engine.run, Kona.Canvas.elem);
      return Kona.Scenes.drawCurrent();
    }
  };

  window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      return setTimeout(callback, 1000 / Kona.Engine.defaults.fps);
    };
  })();

  Kona.Store = (function() {

    function Store() {
      this._store = {};
    }

    Store.prototype.set = function(key, val) {
      var _base;
      (_base = this._store)[key] || (_base[key] = []);
      this._store[key].push(val);
      return this._store[key];
    };

    Store.prototype.get = function(key) {
      return this._store[key] || [];
    };

    Store.prototype.all = function() {
      return this._store;
    };

    Store.prototype.concat = function() {
      var key, result, vals, _ref;
      result = [];
      _ref = this.all();
      for (key in _ref) {
        vals = _ref[key];
        result = result.concat(vals);
      }
      return result;
    };

    Store.prototype.add = Store.prototype.set;

    Store.prototype["for"] = Store.prototype.get;

    return Store;

  })();

  Kona.Events = {
    store: new Kona.Store,
    bind: function(name, handler) {
      return this.store.add(name, handler);
    },
    trigger: function(name) {
      var handler, _i, _len, _ref, _results;
      _ref = this.store.get(name);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _results.push(handler.call());
      }
      return _results;
    }
  };

  Kona.Events.on = Kona.Events.bind;

  Kona.Scenes = {
    maps: [],
    scenes: [],
    currentScene: {
      addEntity: function(ent) {
        return Kona.Engine.queue(function() {
          return Kona.Scenes.currentScene.addEntity(ent);
        });
      }
    },
    loadDefinitions: function(defns) {
      var def, map, name, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = defns.length; _i < _len; _i++) {
        def = defns[_i];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (name in def) {
            map = def[name];
            _results1.push(this.maps.push({
              name: name,
              map: map
            }));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    },
    loadScenes: function(argList) {
      var args, scene, sceneNum, _i, _len, _results;
      if (argList == null) {
        argList = [];
      }
      sceneNum = 1;
      _results = [];
      for (_i = 0, _len = argList.length; _i < _len; _i++) {
        args = argList[_i];
        scene = new Kona.Scene(Kona.Utils.merge({
          name: "s" + sceneNum
        }, args));
        _results.push(sceneNum++);
      }
      return _results;
    },
    drawCurrent: function() {
      return this.currentScene.draw();
    },
    getCurrentEntities: function(group) {
      return this.currentScene.entities.get(group);
    },
    setCurrent: function(sceneName) {
      this.currentScene.active = false;
      this.currentScene = this.find(sceneName) || fail("Scenes.setCurrent", "Couldn't find scene: " + sceneName);
      this.currentScene.active = true;
      return this.currentScene.triggerActivation();
    },
    nextScene: function() {
      var sceneNum;
      if (this.currentScene.next != null) {
        return this.setCurrent(this.currentScene.next);
      } else {
        sceneNum = parseInt(this.currentScene.name.replace('s', ''));
        return this.setCurrent("s" + (++sceneNum));
      }
    },
    find: function(sceneName) {
      return Kona.Utils.find(this.scenes, {
        name: sceneName
      });
    }
  };

  Kona.Scene = (function() {

    function Scene(opts) {
      if (opts == null) {
        opts = {};
      }
      this.map = opts.map;
      this.name = opts.name || fail("Scene#new", "Scene must have a name");
      this.active = opts.active != null ? opts.active : false;
      this.background = new Image();
      this.background.src = opts.background || '';
      this.entities = new Kona.Store;
      this.next = opts.next || null;
      this.tree = new QuadTree({
        x: 0,
        y: 0,
        width: Kona.Canvas.width,
        height: Kona.Canvas.height
      });
      if (opts.entities != null) {
        this.loadEntities(opts.entities);
      }
      Kona.Scenes.scenes.push(this);
    }

    Scene.prototype.addEntity = function(entity) {
      entity.scene = this;
      entity.loadAnimations();
      this.entities.add(entity.group, entity);
      return this.tree.insert(entity);
    };

    Scene.prototype.loadEntities = function(grid) {
      var def, ent, map, offset, opts, row, rule, startX, startY, x, y, _i, _j, _len, _len1, _results;
      x = 0;
      y = Kona.Canvas.height - (grid.length * Kona.Tile.tileSize);
      map = Kona.Utils.find(Kona.Scenes.maps, {
        name: this.map
      }).map;
      _results = [];
      for (_i = 0, _len = grid.length; _i < _len; _i++) {
        row = grid[_i];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          def = row[_j];
          rule = map[def] || fail("Scene#loadEntities", "No mapping found for rule: " + def);
          offset = rule.opts ? rule.opts.offset : null;
          startX = offset != null ? x + (offset.x || 0) : x;
          startY = offset != null ? y + (offset.y || 0) : y;
          opts = Kona.Utils.merge({
            x: startX,
            y: startY,
            group: rule.group,
            scene: this
          }, rule.opts);
          ent = new rule.entity(opts);
          this.addEntity(ent);
          x += Kona.Tile.tileSize;
        }
        x = 0;
        _results.push(y += Kona.Tile.tileSize);
      }
      return _results;
    };

    Scene.prototype.removeEntity = function(entity) {
      var ent, idx, list, _i, _len, _results;
      list = this.entities["for"](entity.group);
      _results = [];
      for (idx = _i = 0, _len = list.length; _i < _len; idx = ++_i) {
        ent = list[idx];
        if (entity === ent) {
          _results.push(list.splice(idx, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Scene.prototype.drawTree = function(node) {
      var bounds, child, n, _i, _j, _len, _len1, _ref, _ref1, _results;
      bounds = node.bounds;
      Kona.Canvas.ctx.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height);
      _ref = node.getChildren();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        Kona.Canvas.ctx.strokeRect(child.x, child.y, child.width, child.height);
      }
      _ref1 = node.nodes;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        n = _ref1[_j];
        _results.push(this.drawTree(n));
      }
      return _results;
    };

    Scene.prototype.draw = function() {
      var entities, entity, _i, _len;
      Kona.Canvas.clear();
      entities = this.entities.concat();
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        if (entity != null) {
          if (!Kona.gamePaused) {
            entity.update();
          }
          entity.draw();
        }
      }
      this.drawTree(this.tree.root);
      if (Kona.gamePaused) {
        return this.drawPauseOverlay();
      }
    };

    Scene.prototype.drawPauseOverlay = function() {
      var _this = this;
      return Kona.Canvas.safe(function() {
        Kona.Canvas.ctx.fillStyle = "rgba(34, 34, 34, 0.6)";
        return Kona.Canvas.ctx.fillRect(0, 0, Kona.Canvas.width, Kona.Canvas.height);
      });
    };

    Scene.prototype.triggerActivation = function() {
      return Kona.Events.trigger("" + this.name + "_activate");
    };

    Scene.prototype.tiles = function() {
      return this.entities.get(Kona.Tile.group).concat(this.entities.get(Kona.BlankTile.group));
    };

    Scene.prototype.findTile = function(opts) {
      var tiles;
      if (opts == null) {
        opts = {};
      }
      tiles = Kona.Scenes.currentScene.tiles();
      return _.find(tiles, function(tile) {
        return tile.position.x === opts.x && tile.position.y === opts.y;
      }) || null;
    };

    return Scene;

  })();

  Kona.Entity = (function() {

    Entity.grav = 9;

    Entity.loadAnimations = function(group_or_animations, animations) {
      var group;
      if (animations == null) {
        animations = {};
      }
      if (_.isString(group_or_animations)) {
        group = group_or_animations;
      } else {
        group = this.group;
        animations = group_or_animations;
      }
      return Kona.Animations["" + group + ":" + this.name] = animations;
    };

    function Entity(opts) {
      var group, parent;
      if (opts == null) {
        opts = {};
      }
      this.onSurface = __bind(this.onSurface, this);

      this.eachSolidEntity = __bind(this.eachSolidEntity, this);

      group = opts.group || this.constructor.group;
      this.group = group || fail("" + (this["class"]()) + "#new", "entity must have a group");
      this.scene = opts.scene;
      this.solid = opts.solid != null ? opts.solid : true;
      this.gravity = opts.gravity != null ? opts.gravity : true;
      this.speed = opts.speed || 0;
      this.facing = opts.facing || '';
      this.sprite = new Image();
      this.sprite.src = opts.sprite || null;
      this.position = {
        x: opts.x || 0,
        y: opts.y || 0
      };
      this.direction = {
        dx: opts.dx || 0,
        dy: opts.dy || 0
      };
      this.box = {
        width: opts.width || 0,
        height: opts.height || 0
      };
      parent = this;
      this.sprite.onload = function() {
        if (parent.box.width === 0) {
          parent.box.width = this.width;
        }
        if (parent.box.height === 0) {
          return parent.box.height = this.height;
        }
      };
      this.animations = [];
      this.currentAnimation = null;
    }

    Entity.prototype["class"] = function() {
      return this.constructor.name;
    };

    Entity.prototype.toString = function() {
      return "<" + (this["class"]()) + " position={ x: " + this.position.x + ", y: " + this.position.y + "}>";
    };

    Entity.prototype.update = function() {
      if (this.direction.dx > 0) {
        this.facing = 'right';
      } else if (this.direction.dx < 0) {
        this.facing = 'left';
      }
      this.addGravity();
      this.position.x += this.speed * this.direction.dx;
      this.position.y += this.speed * this.direction.dy;
      this.correctLeft();
      return this.correctRight();
    };

    Entity.prototype.draw = function() {
      if (this.currentAnimation != null) {
        return this.currentAnimation.draw();
      } else {
        if (this.sprite.src !== '') {
          return Kona.Canvas.ctx.drawImage(this.sprite, this.position.x, this.position.y, this.box.width, this.box.height);
        }
      }
    };

    Entity.prototype.destroy = function() {
      return Kona.Scenes.currentScene.removeEntity(this);
    };

    Entity.prototype.isActive = function() {
      return this.scene === Kona.Scenes.currentScene;
    };

    Entity.prototype.top = function() {
      return this.position.y;
    };

    Entity.prototype.bottom = function() {
      return this.position.y + this.box.height;
    };

    Entity.prototype.left = function() {
      return this.position.x;
    };

    Entity.prototype.right = function() {
      return this.position.x + this.box.width;
    };

    Entity.prototype.midx = function() {
      return this.position.x + Math.ceil(this.box.width / 2);
    };

    Entity.prototype.midy = function() {
      return this.position.y + Math.ceil(this.box.height / 2);
    };

    Entity.prototype.movingLeft = function() {
      return this.direction.dx < 0;
    };

    Entity.prototype.movingRight = function() {
      return this.direction.dx > 0;
    };

    Entity.prototype.addGravity = function() {
      if (this.gravity) {
        this.position.y += Kona.Entity.grav;
        return this.correctBottom();
      }
    };

    Entity.prototype.setPosition = function(x, y) {
      this.position.x = x;
      return this.position.y = y;
    };

    Entity.prototype.stop = function(axis) {
      if (axis == null) {
        axis = null;
      }
      if (axis != null) {
        return this.direction["d" + axis] = 0;
      } else {
        return this.direction.dx = this.direction.dy = 0;
      }
    };

    Entity.prototype.leftCol = function() {
      return Math.floor(this.left() / Kona.Tile.tileSize);
    };

    Entity.prototype.rightCol = function() {
      return Math.floor(this.right() / Kona.Tile.tileSize);
    };

    Entity.prototype.bottomCol = function() {
      return Math.floor(this.bottom() / Kona.Tile.tileSize) + 1;
    };

    Entity.prototype.topCol = function() {
      return Math.floor(this.top() / Kona.Tile.tileSize) + 1;
    };

    Entity.prototype.bottomLeftNeighbor = function() {
      var midX, neighborX, neighborY, size;
      size = Kona.Tile.tileSize;
      midX = (this.leftCol() * size) + (size / 2);
      neighborX = this.leftCol() * size;
      if (this.left() < midX) {
        neighborX -= size;
      }
      neighborY = this.bottomCol() * size;
      return Kona.Scenes.currentScene.findTile({
        x: neighborX,
        y: neighborY
      });
    };

    Entity.prototype.bottomRightNeighbor = function() {
      var midX, neighborX, neighborY, size;
      size = Kona.Tile.tileSize;
      midX = (this.rightCol() * size) + (size / 2);
      neighborX = this.rightCol() * size;
      if (this.right > midX) {
        neighborX -= size;
      }
      neighborY = this.bottomCol() * size;
      return Kona.Scenes.currentScene.findTile({
        x: neighborX,
        y: neighborY
      });
    };

    Entity.prototype.isFacing = function(entity) {
      if (this.facing === 'left') {
        return entity.right() <= this.left();
      } else {
        return entity.left() >= this.right();
      }
    };

    Entity.prototype.inRowSpace = function(e) {
      return this.bottom() > e.top() && this.top() < e.bottom();
    };

    Entity.prototype.inColumnSpace = function(e) {
      return this.left() < e.right() && this.right() > e.left();
    };

    Entity.prototype.neighborEntities = function(opts) {
      var _this = this;
      if (opts == null) {
        opts = {};
      }
      return _.select(Kona.Scenes.currentScene.entities.concat(), function(e) {
        return e !== _this;
      });
    };

    Entity.prototype.eachSolidEntity = function(fn) {
      var ent, _i, _len, _ref, _results;
      _ref = this.neighborEntities();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ent = _ref[_i];
        if ((ent != null) && ent.solid) {
          _results.push(fn(ent));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entity.prototype.anyCollisions = function(fn) {
      var collision,
        _this = this;
      collision = false;
      this.eachSolidEntity(function(ent) {
        if (fn(ent)) {
          return collision = true;
        }
      });
      return collision;
    };

    Entity.prototype.leftCollision = function(ent) {
      return this.right() >= ent.right() + 1 && this.left() <= ent.right() + 1 && this.inRowSpace(ent);
    };

    Entity.prototype.hasLeftCollisions = function() {
      var _this = this;
      return this.anyCollisions(function(ent) {
        return _this.leftCollision(ent);
      });
    };

    Entity.prototype.rightCollision = function(ent) {
      return this.left() <= ent.left() + 1 && this.right() >= ent.left() + 1 && this.inRowSpace(ent);
    };

    Entity.prototype.hasRightCollisions = function() {
      var _this = this;
      return this.anyCollisions(function(ent) {
        return _this.rightCollision(ent);
      });
    };

    Entity.prototype.topCollision = function(ent) {
      return this.bottom() >= ent.bottom() + 1 && this.top() <= ent.bottom() + 1 && this.inColumnSpace(ent);
    };

    Entity.prototype.hasTopCollisions = function() {
      var _this = this;
      return this.anyCollisions(function(ent) {
        return _this.topCollision(ent);
      });
    };

    Entity.prototype.bottomCollision = function(ent) {
      return this.top() <= ent.top() && this.bottom() >= ent.top() && this.inColumnSpace(ent);
    };

    Entity.prototype.hasBottomCollisions = function() {
      var _this = this;
      return this.anyCollisions(function(ent) {
        return _this.bottomCollision(ent);
      });
    };

    Entity.prototype.intersecting = function(ent) {
      return this.bottomCollision(ent) || this.leftCollision(ent) || this.rightCollision(ent) || this.topCollision(ent);
    };

    Entity.prototype.onSurface = function() {
      var _this = this;
      return _.any(this.neighborEntities(), function(ent) {
        return ent.solid && ent.position.y === _this.bottom() + 1;
      });
    };

    Entity.prototype.correctLeft = function() {
      var _results;
      _results = [];
      while (this.hasLeftCollisions() || this.left() < 0) {
        _results.push(this.position.x += 1);
      }
      return _results;
    };

    Entity.prototype.correctRight = function() {
      var _results;
      _results = [];
      while (this.hasRightCollisions()) {
        _results.push(this.position.x -= 1);
      }
      return _results;
    };

    Entity.prototype.correctTop = function() {
      var _results;
      _results = [];
      while (this.hasTopCollisions()) {
        _results.push(this.position.y += 1);
      }
      return _results;
    };

    Entity.prototype.correctBottom = function() {
      var _results;
      _results = [];
      while (this.hasBottomCollisions()) {
        _results.push(this.position.y -= 1);
      }
      return _results;
    };

    Entity.prototype.collects = function() {
      var name, names, _i, _len, _results;
      names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        _results.push(Kona.Collectors.add(name, this));
      }
      return _results;
    };

    Entity.prototype.triggers = Entity.prototype.collects;

    Entity.prototype.loadAnimations = function() {
      var animOpts, animations, name, opts, _results;
      animations = Kona.Animations["" + this.group + ":" + (this["class"]())];
      if (animations == null) {
        return;
      }
      _results = [];
      for (name in animations) {
        opts = animations[name];
        animOpts = Kona.Utils.merge({
          entity: this,
          name: name,
          width: this.box.width,
          height: this.box.height
        }, opts);
        this.animations[name] = new Kona.Animation(animOpts);
        if (animOpts.active === true) {
          _results.push(this.setAnimation(name));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entity.prototype.setAnimation = function(name) {
      return this.currentAnimation = this.animations[name] || fail("" + (this["class"]()) + "#setAnimation", "Couldn't find animation with name " + name);
    };

    Entity.prototype.clearAnimation = function() {
      return this.currentAnimation = null;
    };

    Entity.prototype.include = function() {
      var obj, objs, _i, _len, _results;
      objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = objs.length; _i < _len; _i++) {
        obj = objs[_i];
        _results.push(Kona.Utils.merge(this, obj));
      }
      return _results;
    };

    return Entity;

  })();

  Kona.Animations = {};

  Kona.Animation = (function() {

    function Animation(opts) {
      if (opts == null) {
        opts = {};
      }
      this.lastUpdateTime = 0;
      this.elapsed = 0;
      this.msPerFrame = opts.msPerFrame || 25;
      this.entity = opts.entity;
      this.name = opts.name;
      this.image = new Image();
      this.image.src = opts.sheet;
      this.position = {
        x: 0,
        y: 0
      };
      this.frames = {
        width: opts.width,
        height: opts.height
      };
      this.repeat = opts.repeat != null ? opts.repeat : true;
      this.next = opts.next || null;
      this.played = false;
    }

    Animation.prototype.triggerNext = function() {
      if (_.isString(this.next)) {
        return this.entity.setAnimation(this.next);
      } else if (_.isFunction(this.next)) {
        return this.next();
      }
    };

    Animation.prototype.update = function() {
      var delta;
      delta = Date.now() - this.lastUpdateTime;
      if (this.elapsed > this.msPerFrame) {
        this.elapsed = 0;
        this.position.x += this.frames.width;
        if (this.position.x + this.frames.width > this.image.width) {
          this.position.x = 0;
          this.position.y += this.frames.height;
          if (this.position.y + this.frames.height >= this.image.height) {
            this.reset();
          }
        }
      } else {
        this.elapsed += delta;
      }
      return this.lastUpdateTime = Date.now();
    };

    Animation.prototype.draw = function() {
      var targetHeight, targetWidth, targetX, targetY;
      targetX = this.entity.position.x;
      targetY = this.entity.position.y;
      targetWidth = this.entity.box.width;
      targetHeight = this.entity.box.height;
      if (!(!this.repeat && this.played)) {
        Kona.Canvas.ctx.drawImage(this.image, this.position.x, this.position.y, this.frames.width, this.frames.height, targetX, targetY, targetWidth, targetHeight);
        return this.update();
      }
    };

    Animation.prototype.reset = function() {
      this.played = true;
      this.triggerNext();
      return this.position.x = this.position.y = 0;
    };

    return Animation;

  })();

  Kona.Tile = (function(_super) {

    __extends(Tile, _super);

    Tile.group = 'tiles';

    Tile.tileSize = 60;

    function Tile(opts) {
      if (opts == null) {
        opts = {};
      }
      Tile.__super__.constructor.call(this, opts);
      this.size = Kona.Tile.tileSize;
      this.box = {
        width: this.size,
        height: this.size
      };
    }

    Tile.prototype.update = function() {};

    return Tile;

  })(Kona.Entity);

  Kona.BlankTile = (function(_super) {

    __extends(BlankTile, _super);

    BlankTile.group = 'blank_tiles';

    function BlankTile(opts) {
      BlankTile.__super__.constructor.call(this, opts);
      this.solid = false;
    }

    BlankTile.prototype.update = function() {};

    BlankTile.prototype.draw = function() {
      var _this = this;
      return Kona.Canvas.safe(function() {
        Kona.Canvas.ctx.strokeStyle = "red";
        return Kona.Canvas.ctx.strokeRect(_this.position.x, _this.position.y, _this.box.width, _this.box.height);
      });
    };

    return BlankTile;

  })(Kona.Tile);

  Kona.Trigger = (function(_super) {

    __extends(Trigger, _super);

    function Trigger(opts) {
      if (opts == null) {
        opts = {};
      }
      Trigger.__super__.constructor.call(this, opts);
      this.solid = false;
      this.gravity = false;
      this.pickupSound = '';
    }

    Trigger.prototype.withinTolerance = function(ent) {
      return true;
    };

    Trigger.prototype.update = function() {
      var entity, _i, _len, _ref, _results;
      _ref = Kona.Collectors["for"](this.group);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (this.intersecting(entity) && this.withinTolerance(entity)) {
          _results.push(this.activate(entity));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Trigger.prototype.activate = function() {
      var sound;
      if (_.isString(this.pickupSound)) {
        if (this.pickupSound !== '') {
          return Kona.Sounds.play(this.pickupSound);
        }
      } else if (_.isArray(this.pickupSound)) {
        sound = Kona.Utils.sample(this.pickupSound);
        return Kona.Sounds.play(sound);
      }
    };

    return Trigger;

  })(Kona.Entity);

  Kona.Collectors = new Kona.Store;

  Kona.Collectable = (function(_super) {

    __extends(Collectable, _super);

    function Collectable() {
      return Collectable.__super__.constructor.apply(this, arguments);
    }

    Collectable.prototype.activate = function() {
      Collectable.__super__.activate.call(this);
      return this.destroy();
    };

    return Collectable;

  })(Kona.Trigger);

  Kona.Keys = {
    _keycodes: {
      'enter': 13,
      'return': 13,
      'esc': 27,
      'escape': 27,
      'ctrl': 17,
      'control': 17,
      'left': 37,
      'up': 38,
      'right': 39,
      'down': 40,
      'shift': 16,
      'space': 32
    },
    _names: {
      13: 'enter',
      16: 'shift',
      17: 'ctrl',
      27: 'esc',
      32: 'space',
      37: 'left',
      38: 'up',
      39: 'right',
      40: 'down',
      48: '0',
      49: '1',
      50: '2',
      51: '3',
      52: '4',
      53: '5',
      54: '6',
      55: '7',
      56: '8',
      57: '9',
      65: 'a',
      66: 'b',
      67: 'c',
      68: 'd',
      69: 'e',
      70: 'f',
      71: 'g',
      72: 'h',
      73: 'i',
      74: 'j',
      75: 'k',
      76: 'l',
      77: 'm',
      78: 'n',
      79: 'o',
      80: 'p',
      81: 'q',
      82: 'r',
      83: 's',
      84: 't',
      85: 'u',
      86: 'v',
      87: 'w',
      88: 'x',
      89: 'y',
      90: 'z'
    },
    bind: function(key, fn) {
      var keycode;
      key = key.replace(/\s/g, '');
      keycode = this._keycodes[key] || key.toUpperCase().charCodeAt(0);
      return Kona.Events.bind("key_" + keycode, fn);
    },
    dispatch: function(event) {
      var keycode;
      keycode = this.eventKeyCode(event);
      if (this.reject(event)) {
        return;
      }
      return Kona.Events.trigger("key_" + keycode);
    },
    reject: function(event) {
      return _.contains(['INPUT', 'SELECT', 'TEXTAREA'], event.target.tagName);
    },
    keycodeName: function(event) {
      return this._names[this.eventKeyCode(event)];
    },
    eventKeyCode: function(event) {
      return event.which || event.keyCode;
    }
  };

  Kona.ready(function() {
    document.body.onkeydown = function(e) {
      var name;
      name = Kona.Keys.keycodeName(e);
      if (Kona.Keys.keydown) {
        return Kona.Keys.keydown(name);
      }
    };
    document.body.onkeyup = function(e) {
      var name;
      name = Kona.Keys.keycodeName(e);
      if (Kona.Keys.keyup) {
        return Kona.Keys.keyup(name);
      }
    };
    return document.addEventListener('keydown', Kona.Keys.dispatch.bind(Kona.Keys), false);
  });

  Kona.Mouse = {
    x: 0,
    y: 0,
    isDown: false,
    onMouseMove: function(e) {
      var canvas;
      if (e == null) {
        e = window.event;
      }
      canvas = Kona.Canvas.elem;
      this.x = e.clientX - canvas.offsetLeft;
      return this.y = e.clientY - canvas.offsetTop;
    },
    onMouseDown: function(e) {
      return this.isDown = true;
    },
    onMouseUp: function(e) {
      return this.isDown = false;
    }
  };

  Kona.ready(function() {
    document.onmousemove = Kona.Mouse.onMouseMove;
    document.onmousedown = Kona.Mouse.onMouseDown;
    return document.onmouseup = Kona.Mouse.onMouseUp;
  });

  Kona.Sounds = {
    sounds: {},
    load: function(dir_or_sounds, sounds) {
      var dir, name, path, sep, src, _results, _results1;
      if (sounds == null) {
        sounds = {};
      }
      if (_.isString(dir_or_sounds)) {
        dir = dir_or_sounds;
        _results = [];
        for (name in sounds) {
          src = sounds[name];
          sep = dir.slice(-1) === '/' ? '' : '/';
          path = "" + dir + sep + src;
          _results.push(this.sounds[name] = new Kona.Sound(path));
        }
        return _results;
      } else {
        sounds = dir_or_sounds;
        _results1 = [];
        for (name in sounds) {
          src = sounds[name];
          _results1.push(this.sounds[name] = new Kona.Sound(src));
        }
        return _results1;
      }
    },
    play: function(name, opts) {
      if (opts == null) {
        opts = {};
      }
      if (this.sounds[name] != null) {
        return this.sounds[name].play();
      } else {
        return new Kona.Sound(name, opts).play();
      }
    }
  };

  Kona.Sound = (function() {

    Sound.defaults = {
      autoplay: false,
      duration: -1,
      formats: [],
      loop: false,
      placeholder: '--',
      preload: 'metadata',
      volume: 100
    };

    Sound.types = {
      'mp3': 'audio/mpeg',
      'ogg': 'audio/ogg',
      'wav': 'audio/wav',
      'aac': 'audio/aac',
      'm4a': 'audio/x-m4a'
    };

    Sound.testEl = document.createElement('audio');

    Sound.isSupported = function() {
      return !!this.testEl.canPlayType;
    };

    Sound.isOGGSupported = function() {
      return this.testEl.canPlayType('audio/ogg codecs="vorbis"');
    };

    Sound.isWAVSupported = function() {
      return this.testEl.canPlayType('audio/wav codecs="1"');
    };

    Sound.isMP3Supported = function() {
      return this.testEl.canPlayType('audio/mpeg codecs="mp3"');
    };

    Sound.isAACSupported = function() {
      return this.testEl.canPlayType('audio/x-m4a') || this.testEl.canPlayType('audio/aac');
    };

    Sound.supportedFormats = function() {
      var supported;
      supported = function(check) {
        if (check === '') {
          return 'yes';
        } else {
          return check;
        }
      };
      Kona.debug("Audio format compatability:");
      Kona.debug("  OGG: " + (supported(this.isOGGSupported())));
      Kona.debug("  WAV: " + (supported(this.isWAVSupported())));
      Kona.debug("  MP3: " + (supported(this.isMP3Supported())));
      return Kona.debug("  AAC: " + (supported(this.isAACSupported())));
    };

    function Sound(src, opts) {
      var key, s, value, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      this.supported = Kona.Sound.isSupported();
      if (this.supported && (src != null)) {
        _ref = Kona.Sound.defaults;
        for (key in _ref) {
          value = _ref[key];
          opts[key] = opts[key] || value;
        }
      }
      this.el = document.createElement('audio');
      if (_.isArray(src)) {
        for (_i = 0, _len = src.length; _i < _len; _i++) {
          s = src[_i];
          this.addSource(this.el, s);
        }
      } else if ((opts.formats != null) && opts.formats.length) {
        _ref1 = opts.formats;
        for (value = _j = 0, _len1 = _ref1.length; _j < _len1; value = ++_j) {
          key = _ref1[value];
          this.addSource(this.el, "" + src + "." + key);
        }
      } else {
        this.addSource(this.el, src);
      }
      if (opts.loop === true) {
        this.loop();
      }
      if (opts.autoplay === true) {
        this.el.autoplay = 'autoplay';
      }
      this.el.preload = opts.preload === true ? 'auto' : 'none';
      this.setVolume(opts.volume);
      this.el.addEventListener("loadedmetadata", function() {
        return _this.duration = _this.el.duration;
      });
    }

    Sound.prototype.getExt = function(filename) {
      return filename.split('.').pop();
    };

    Sound.prototype.addSource = function(el, src) {
      var ext, source;
      source = document.createElement('source');
      source.src = src;
      ext = this.getExt(src);
      if (Kona.Sound.types[ext] != null) {
        source.type = Kona.Sound.types[ext];
      }
      return el.appendChild(source);
    };

    Sound.prototype.load = function() {
      if (this.supported) {
        return this.el.load();
      } else {
        return this;
      }
    };

    Sound.prototype.play = function() {
      if (this.supported) {
        return this.el.play();
      } else {
        return this;
      }
    };

    Sound.prototype.togglePlay = function() {
      if (!this.supported) {
        return this;
      }
      if (this.el.paused) {
        this.el.play();
      } else {
        this.el.pause();
      }
      return this;
    };

    Sound.prototype.pause = function() {
      if (this.supported) {
        return this.el.pause();
      } else {
        return this;
      }
    };

    Sound.prototype.isPaused = function() {
      if (this.supported) {
        return this.el.paused;
      } else {
        return null;
      }
    };

    Sound.prototype.stop = function() {
      if (this.supported) {
        this.el.currentTime = this.el.duration;
        return this.el.pause();
      } else {
        return null;
      }
    };

    Sound.prototype.isEnded = function() {
      if (this.supported) {
        return this.el.ended;
      } else {
        return null;
      }
    };

    Sound.prototype.getDuration = function() {
      if (this.supported) {
        return this.duration;
      } else {
        return null;
      }
    };

    Sound.prototype.mute = function() {
      if (this.supported) {
        return this.el.muted = true;
      } else {
        return null;
      }
    };

    Sound.prototype.unmute = function() {
      if (this.supported) {
        return this.el.muted = false;
      } else {
        return null;
      }
    };

    Sound.prototype.isMuted = function() {
      if (this.supported) {
        return this.el.muted;
      } else {
        return null;
      }
    };

    Sound.prototype.toggleMute = function() {
      if (this.supported) {
        return this.el.muted = !this.el.muted;
      } else {
        return null;
      }
    };

    Sound.prototype.setVolume = function(volume) {
      if (!this.supported) {
        return this;
      }
      if (volume < 0) {
        volume = 0;
      }
      if (volume > 100) {
        volume = 100;
      }
      this.volume = volume;
      this.el.volume = volume / 100;
      return this;
    };

    Sound.prototype.getVolume = function() {
      if (this.supported) {
        return this.volume;
      } else {
        return null;
      }
    };

    Sound.prototype.increaseVolume = function(value) {
      if (value == null) {
        value = 1;
      }
      return this.setVolume(this.volume + value);
    };

    Sound.prototype.decreaseVolume = function(value) {
      if (value == null) {
        value = 1;
      }
      return this.setVolume(this.volume - value);
    };

    Sound.prototype.getTime = function() {
      var time;
      if (!this.supported) {
        return null;
      }
      time = Math.round(this.el.currentTime * 100) / 100;
      if (isNaN(time)) {
        return Kona.Sound.defaults.placeholder;
      } else {
        return time;
      }
    };

    Sound.prototype.loop = function() {
      return this.el.loop = 'loop';
    };

    Sound.prototype.unloop = function() {
      return this.el.loop = null;
    };

    return Sound;

  })();

  Kona.Menu = (function(_super) {

    __extends(Menu, _super);

    function Menu(opts) {
      var _this = this;
      if (opts == null) {
        opts = {};
      }
      Menu.__super__.constructor.call(this, opts);
      this.fontSize = opts.fontSize || '30px';
      this.font = opts.font || 'Times New Roman';
      this.textAlign = opts.textAlign || 'center';
      this.textColor = opts.textColor || 'white';
      this.selectedColor = opts.selectedColor || 'yellow';
      this.options = opts.options;
      this.trigger = opts.trigger;
      if (this.trigger != null) {
        Kona.Keys.bind(this.trigger, function() {
          Kona.Canvas.clear();
          return Kona.Scenes.setCurrent(_this.name);
        });
      }
    }

    Menu.prototype.draw = function() {
      var _this = this;
      return Kona.Canvas.safe(function() {
        var callback, text, y, y_offset, _ref, _results;
        Kona.Canvas.ctx.font = "" + _this.fontSize + " " + _this.font;
        Kona.Canvas.ctx.textAlign = _this.textAlign;
        y = (Kona.Canvas.height - (parseInt(_this.fontSize) * _.size(_this.options))) / 2;
        y_offset = 0;
        _ref = _this.options;
        _results = [];
        for (text in _ref) {
          callback = _ref[text];
          Kona.Canvas.ctx.fillStyle = 'red';
          Kona.Canvas.ctx.fillText(text, Kona.Canvas.width / 2, y + y_offset);
          _results.push(y_offset += parseInt(_this.fontSize) + 20);
        }
        return _results;
      });
    };

    return Menu;

  })(Kona.Scene);

  Kona.Weapon = (function(_super) {

    __extends(Weapon, _super);

    function Weapon(opts) {
      if (opts == null) {
        opts = {};
      }
      Weapon.__super__.constructor.call(this, opts);
      this.canFire = true;
      this.recharge = opts.recharge || 300;
      this.projType = opts.projType || null;
      this.projSound = opts.sound || '';
      this.pickupSound = opts.pickup || '';
      this.holder = opts.holder || null;
    }

    Weapon.prototype.activate = function(collector) {
      Weapon.__super__.activate.apply(this, arguments);
      this.holder = collector;
      return collector.currentWeapon = this;
    };

    Weapon.prototype.fire = function() {
      var proj, projDx, startX, startY,
        _this = this;
      if (this.canFire) {
        projDx = this.holder.facing === 'right' ? 1 : -1;
        startX = this.holder.facing === 'right' ? this.holder.right() + 1 : this.holder.left() - 30;
        startY = this.holder.top() + 9;
        proj = new this.projType({
          group: 'projectiles',
          x: startX,
          y: startY,
          dx: projDx
        });
        this.holder.scene.addEntity(proj);
        if (this.projSound !== '') {
          Kona.Sounds.play(this.projSound);
        }
        this.canFire = false;
        return setTimeout(function() {
          return _this.canFire = true;
        }, this.recharge);
      }
    };

    return Weapon;

  })(Kona.Collectable);

  Kona.EnemyWeapon = (function(_super) {

    __extends(EnemyWeapon, _super);

    function EnemyWeapon(opts) {
      if (opts == null) {
        opts = {};
      }
      this.targets = opts.targets;
      this.projOffset = opts.offset || {
        x: 0,
        y: 0
      };
      EnemyWeapon.__super__.constructor.call(this, opts);
    }

    EnemyWeapon.prototype.randomTarget = function() {
      var group, targetEnts, _i, _len, _ref;
      targetEnts = [];
      _ref = this.targets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        targetEnts = targetEnts.concat(Kona.Scenes.getCurrentEntities(group));
      }
      return Kona.Utils.sample(targetEnts);
    };

    EnemyWeapon.prototype.fire = function(target) {
      var angle, proj, projDx, projDy, speed, startX, startY, targetLeft, targetUp, x, y;
      if (target == null) {
        target = null;
      }
      if (target == null) {
        target = this.randomTarget();
      }
      if (this.isActive() && target.isAlive) {
        x = Math.abs(this.holder.midx() - target.midx());
        y = Math.abs(this.holder.midy() - target.midy());
        targetLeft = this.holder.position.x >= target.midx();
        targetUp = this.holder.position.y >= target.midy();
        angle = Math.atan2(y, x) + (targetUp ? 0.5 : 0);
        speed = 1;
        projDx = speed * Math.cos(angle) * (targetLeft ? -1 : 1);
        projDy = speed * Math.sin(angle) * (targetUp ? -1 : 1);
        startX = targetLeft ? this.holder.left() - this.projOffset.x : this.holder.right() + this.projOffset.x;
        startY = this.holder.top() + this.projOffset.y;
        proj = new this.projType({
          group: 'projectiles',
          x: startX,
          y: startY,
          dx: projDx,
          dy: projDy,
          target: target
        });
        this.holder.scene.addEntity(proj);
        if (this.projSound !== '') {
          return Kona.Sounds.play(this.projSound);
        }
      }
    };

    return EnemyWeapon;

  })(Kona.Weapon);

  Kona.Projectile = (function(_super) {

    __extends(Projectile, _super);

    function Projectile(opts) {
      if (opts == null) {
        opts = {};
      }
      Projectile.__super__.constructor.call(this, opts);
      this.target = opts.target || null;
      this.speed = opts.speed || 10;
      this.gravity = false;
    }

    Projectile.prototype.update = function() {
      var dir, ent, leftHit, rightHit, _i, _len, _ref;
      Projectile.__super__.update.call(this);
      this.position.x += this.speed * this.direction.dx;
      if (this.hasLeftCollisions() || this.hasRightCollisions()) {
        _ref = this.neighborEntities();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ent = _ref[_i];
          leftHit = this.leftCollision(ent);
          rightHit = this.rightCollision(ent);
          if (ent.solid && (leftHit || rightHit)) {
            if (this.target === ent || _.contains(this.destructibles, ent.group)) {
              if (ent.hit != null) {
                dir = leftHit ? 'right' : 'left';
                ent.hit(dir);
              } else {
                ent.destroy();
              }
            }
            return this.destroy();
          }
        }
      }
      if (this.position.x < 0 || this.position.x > Kona.Canvas.width) {
        return this.destroy();
      }
    };

    return Projectile;

  })(Kona.Entity);

}).call(this);
