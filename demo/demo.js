// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Kona.ready(function() {
  var Enemy, Player, Projectile, level1_1, level1_2, player;
  Kona.Canvas.init({
    id: 'canvas'
  });
  level1_1 = new Kona.Scene({
    name: 'lvl1:s1',
    background: 'lvl2.jpg',
    active: true
  });
  level1_2 = new Kona.Scene({
    name: 'lvl1:s2',
    background: 'lvl2.jpg'
  });
  Player = (function(_super) {

    __extends(Player, _super);

    function Player(opts) {
      if (opts == null) {
        opts = {};
      }
      Player.__super__.constructor.call(this, opts);
      this.color = opts.color;
      this.speed = 3;
      this.jumpHeight = 12;
      this.isJumping = false;
      this.facing = 'right';
      this.canFire = true;
    }

    Player.prototype.update = function() {
      Player.__super__.update.apply(this, arguments);
      if (this.isJumping) {
        this.position.y -= this.jumpHeight;
        this.correctTop();
      } else {
        this.addGravity();
      }
      if (this.top() > Kona.Canvas.height) {
        this.die();
      }
      if (this.right() > Kona.Canvas.width - 20) {
        Kona.Scenes.nextScene();
        level1_2.addEntity(player);
        return player.setPosition(0, this.top());
      }
    };

    Player.prototype.draw = function() {
      var _this = this;
      return Kona.Canvas.safe(function() {
        Kona.Canvas.ctx.fillStyle = _this.color;
        return Kona.Canvas.ctx.fillRect(_this.position.x, _this.position.y, _this.box.width, _this.box.height);
      });
    };

    Player.prototype.jump = function() {
      var jumpDuration,
        _this = this;
      jumpDuration = 180;
      if (this.isJumping) {
        return false;
      } else if (this.onSurface()) {
        this.isJumping = true;
        this.position.y -= 20;
        return setTimeout(function() {
          return _this.isJumping = false;
        }, jumpDuration);
      }
    };

    Player.prototype.fire = function() {
      var color, proj, projDx, startX, startY,
        _this = this;
      if (this.canFire) {
        projDx = this.facing === 'right' ? 1 : -1;
        startX = this.facing === 'right' ? this.right() + 1 : this.left() - 30;
        startY = this.top() + 15;
        color = ['red', 'orange', 'blue'][Kona.Utils.randomFromTo(0, 2)];
        proj = new Projectile({
          x: startX,
          y: startY,
          width: 20,
          height: 10,
          dx: projDx,
          color: color,
          group: 'projectiles'
        });
        Kona.Scenes.currentScene.addEntity(proj);
        this.canFire = false;
        return setTimeout(function() {
          return _this.canFire = true;
        }, 150);
      }
    };

    Player.prototype.die = function() {
      var _this = this;
      return setTimeout(function() {
        _this.facing = 'right';
        return _this.setPosition(195, 200);
      }, 400);
    };

    return Player;

  })(Kona.Entity);
  Projectile = (function(_super) {

    __extends(Projectile, _super);

    function Projectile(opts) {
      if (opts == null) {
        opts = {};
      }
      Projectile.__super__.constructor.call(this, opts);
      this.color = opts.color;
      this.speed = 7;
      this.destructibles = ['enemies'];
    }

    Projectile.prototype.update = function() {
      var ent, list, name, _i, _len, _ref,
        _this = this;
      Projectile.__super__.update.apply(this, arguments);
      this.position.x += this.speed * this.direction.dx;
      if (this.leftCollisions() || this.rightCollisions()) {
        _ref = Kona.Scenes.currentScene.entities;
        for (name in _ref) {
          list = _ref[name];
          list = _.reject(list, function(ent) {
            return ent === _this;
          });
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            ent = list[_i];
            if (this.leftCollision(ent) || this.rightCollision(ent)) {
              if (_.contains(this.destructibles, name)) {
                ent.destroy();
              }
              this.destroy();
            }
          }
        }
      }
      if (this.position.x < 0 || this.position.x > Kona.Canvas.width) {
        return this.destroy();
      }
    };

    Projectile.prototype.draw = function() {
      var _this = this;
      return Kona.Canvas.safe(function() {
        Kona.Canvas.ctx.fillStyle = _this.color;
        return Kona.Canvas.ctx.fillRect(_this.position.x, _this.position.y, _this.box.width, _this.box.height);
      });
    };

    return Projectile;

  })(Kona.Entity);
  Enemy = (function(_super) {

    __extends(Enemy, _super);

    function Enemy(opts) {
      if (opts == null) {
        opts = {};
      }
      Enemy.__super__.constructor.call(this, opts);
      this.color = opts.color;
      this.speed = 2;
    }

    Enemy.prototype.update = function() {
      Enemy.__super__.update.apply(this, arguments);
      this.position.x += this.speed * this.direction.dx;
      return this.addGravity();
    };

    Enemy.prototype.draw = function() {
      var _this = this;
      return Kona.Canvas.safe(function() {
        Kona.Canvas.ctx.fillStyle = _this.color;
        return Kona.Canvas.ctx.fillRect(_this.position.x, _this.position.y, _this.box.width, _this.box.height);
      });
    };

    return Enemy;

  })(Kona.Entity);
  player = new Player({
    x: 200,
    y: 200,
    width: 30,
    height: 55,
    color: 'black',
    group: 'player'
  });
  level1_1.addEntity(player);
  Kona.Keys.keydown = function(key) {
    switch (key) {
      case 'left':
        return player.direction.dx = -1;
      case 'right':
        return player.direction.dx = 1;
      case 'up':
        return player.jump();
      case 'space':
        return player.fire();
    }
  };
  Kona.Keys.keyup = function(key) {
    switch (key) {
      case 'left':
      case 'right':
        return player.stop('dx');
      case 'up':
      case 'down':
        return player.stop('dy');
    }
  };
  Kona.Layout.definitionMap = {
    '-': {
      group: 'tiles',
      klass: Kona.BlankTile
    },
    'r': {
      group: 'tiles',
      klass: Kona.Tile,
      opts: {
        color: 'red'
      }
    },
    'o': {
      group: 'tiles',
      klass: Kona.Tile,
      opts: {
        color: 'orange'
      }
    },
    'b': {
      group: 'tiles',
      klass: Kona.Tile,
      opts: {
        color: 'blue'
      }
    },
    'x': {
      group: 'enemies',
      klass: Enemy,
      opts: {
        width: 30,
        height: 55,
        color: '#00ffcc'
      }
    }
  };
  Kona.Layout.buildScene('lvl1:s1', [['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'o', 'b'], ['r', 'b', '-', '-', '-', '-', '-', '-', 'r', '-', '-'], ['o', '-', '-', '-', '-', '-', 'x', '-', '-', '-', '-'], ['r', '-', '-', 'o', '-', '-', 'b', 'o', '-', '-', '-'], ['b', 'o', 'r', 'b', 'r', '-', '-', 'r', 'o', '-', 'r']]);
  Kona.Layout.buildScene('lvl1:s2', [['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['b', 'r', 'o', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', 'r', 'r', 'r', '-', '-', '-'], ['-', '-', '-', '-', 'r', 'r', '-', '-', '-', '-', '-'], ['-', '-', '-', 'r', 'r', '-', '-', '-', '-', 'r', 'r'], ['o', 'b', '-', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r']]);
  return Kona.Engine.start();
});
