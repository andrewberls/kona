// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Kona.ready(function() {
  var Coin, Enemy, Pistol, PistolProj, Player, Projectile, Weapon, level1_1, level1_2, player;
  Kona.Canvas.init('canvas');
  Kona.Sounds.load({
    'fire': 'audio/enemy_fire.ogg'
  });
  level1_1 = new Kona.Scene({
    name: 'lvl1:s1',
    background: 'img/backgrounds/lvl2.jpg',
    active: true
  });
  level1_2 = new Kona.Scene({
    name: 'lvl1:s2',
    background: 'img/backgrounds/lvl2.jpg'
  });
  Player = (function(_super) {

    __extends(Player, _super);

    function Player(opts) {
      if (opts == null) {
        opts = {};
      }
      Player.__super__.constructor.call(this, opts);
      this.speed = 3;
      this.jumpHeight = 12;
      this.isJumping = false;
      this.facing = 'right';
      this.canFire = false;
      this.sprite = new Kona.Sprite('img/entities/player.png');
      this.currentWeapon = null;
      this.collects('coins', 'weapons');
    }

    Player.prototype.update = function() {
      Player.__super__.update.apply(this, arguments);
      this.sprite.setSrc("img/entities/player_" + this.facing + ".png");
      if (this.isJumping) {
        this.position.y -= this.jumpHeight;
        this.correctTop();
      } else {
        this.addGravity();
      }
      if (this.top() > Kona.Canvas.height) {
        this.die();
      }
      if (this.right() > Kona.Canvas.width - 20) {
        Kona.Scenes.nextScene();
        level1_2.addEntity(player);
        return player.setPosition(0, this.top());
      }
    };

    Player.prototype.jump = function() {
      var jumpDuration,
        _this = this;
      jumpDuration = 180;
      if (this.isJumping) {
        return false;
      } else if (this.onSurface()) {
        this.isJumping = true;
        this.position.y -= 20;
        return setTimeout(function() {
          return _this.isJumping = false;
        }, jumpDuration);
      }
    };

    Player.prototype.fire = function() {
      if (this.currentWeapon != null) {
        return this.currentWeapon.fire();
      }
    };

    Player.prototype.die = function() {
      var _this = this;
      return setTimeout(function() {
        _this.facing = 'right';
        return _this.setPosition(195, 200);
      }, 400);
    };

    return Player;

  })(Kona.Entity);
  Enemy = (function(_super) {

    __extends(Enemy, _super);

    function Enemy() {
      return Enemy.__super__.constructor.apply(this, arguments);
    }

    Enemy.prototype.update = function() {
      Enemy.__super__.update.apply(this, arguments);
      return this.addGravity();
    };

    return Enemy;

  })(Kona.Entity);
  Coin = (function(_super) {

    __extends(Coin, _super);

    function Coin() {
      return Coin.__super__.constructor.apply(this, arguments);
    }

    Coin.prototype.activate = function(collector) {
      return puts("Coin activated!");
    };

    return Coin;

  })(Kona.Collectable);
  Weapon = (function(_super) {

    __extends(Weapon, _super);

    function Weapon(opts) {
      if (opts == null) {
        opts = {};
      }
      Weapon.__super__.constructor.call(this, opts);
      this.canFire = true;
      this.recharge = 150;
      this.projType = null;
      this.projSound = '';
      this.holder = null;
    }

    Weapon.prototype.fire = function() {
      var proj, projDx, startX, startY,
        _this = this;
      if (this.canFire) {
        projDx = this.holder.facing === 'right' ? 1 : -1;
        startX = this.holder.facing === 'right' ? this.holder.right() + 1 : this.holder.left() - 30;
        startY = this.holder.top() + 15;
        proj = new this.projType({
          group: 'projectiles',
          x: startX,
          y: startY,
          dx: projDx
        });
        Kona.Scenes.currentScene.addEntity(proj);
        Kona.Sounds.play(this.projSound);
        this.canFire = false;
        return setTimeout(function() {
          return _this.canFire = true;
        }, this.recharge);
      }
    };

    return Weapon;

  })(Kona.Collectable);
  Pistol = (function(_super) {

    __extends(Pistol, _super);

    function Pistol(opts) {
      if (opts == null) {
        opts = {};
      }
      Pistol.__super__.constructor.call(this, opts);
      this.recharge = 150;
      this.projType = PistolProj;
      this.projSound = 'fire';
      this.sprite = new Kona.Sprite('img/weapons/pistol.png');
    }

    Pistol.prototype.activate = function(collector) {
      this.holder = collector;
      return collector.currentWeapon = this;
    };

    return Pistol;

  })(Weapon);
  Projectile = (function(_super) {

    __extends(Projectile, _super);

    function Projectile(opts) {
      if (opts == null) {
        opts = {};
      }
      Projectile.__super__.constructor.call(this, opts);
      this.speed = 7;
      this.destructibles = ['enemies'];
    }

    Projectile.prototype.update = function() {
      var ent, list, name, _i, _len, _ref;
      Projectile.__super__.update.apply(this, arguments);
      this.position.x += this.speed * this.direction.dx;
      if (this.leftCollisions() || this.rightCollisions()) {
        _ref = this.neighborEntities();
        for (name in _ref) {
          list = _ref[name];
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            ent = list[_i];
            if (this.leftCollision(ent) || this.rightCollision(ent)) {
              if (_.contains(this.destructibles, name)) {
                ent.destroy();
              }
              this.destroy();
            }
          }
        }
      }
      if (this.position.x < 0 || this.position.x > Kona.Canvas.width) {
        return this.destroy();
      }
    };

    return Projectile;

  })(Kona.Entity);
  PistolProj = (function(_super) {

    __extends(PistolProj, _super);

    function PistolProj(opts) {
      if (opts == null) {
        opts = {};
      }
      PistolProj.__super__.constructor.call(this, opts);
      this.box = {
        width: 15,
        height: 10
      };
    }

    PistolProj.prototype.draw = function() {
      var _this = this;
      return Kona.Canvas.safe(function() {
        Kona.Canvas.ctx.fillStyle = 'red';
        return Kona.Canvas.ctx.fillRect(_this.position.x, _this.position.y, _this.box.width, _this.box.height);
      });
    };

    return PistolProj;

  })(Projectile);
  player = new Player({
    x: 200,
    y: 200,
    width: 40,
    height: 55,
    color: 'black',
    group: 'player'
  });
  level1_1.addEntity(player);
  Kona.Keys.keydown = function(key) {
    switch (key) {
      case 'left':
        return player.direction.dx = -1;
      case 'right':
        return player.direction.dx = 1;
      case 'up':
        return player.jump();
      case 'space':
        return player.fire();
    }
  };
  Kona.Keys.keyup = function(key) {
    switch (key) {
      case 'left':
      case 'right':
        return player.stop('dx');
      case 'up':
      case 'down':
        return player.stop('dy');
    }
  };
  Kona.Scenes.definitionMap = {
    '-': {
      group: 'tiles',
      klass: Kona.BlankTile
    },
    'r': {
      group: 'tiles',
      klass: Kona.Tile,
      opts: {
        sprite: ''
      }
    },
    'o': {
      group: 'tiles',
      klass: Kona.Tile,
      opts: {
        sprite: ''
      }
    },
    'b': {
      group: 'tiles',
      klass: Kona.Tile,
      opts: {
        sprite: ''
      }
    },
    'x': {
      group: 'enemies',
      klass: Enemy,
      opts: {
        width: 40,
        height: 60,
        offset: {
          x: 15
        },
        sprite: 'img/entities/ninja1.png'
      }
    },
    'c': {
      group: 'coins',
      klass: Coin,
      opts: {
        width: 25,
        height: 25,
        offset: {
          x: 20,
          y: 20
        },
        sprite: 'img/powerups/coin.png'
      }
    },
    'p': {
      group: 'weapons',
      klass: Pistol,
      opts: {
        width: 50,
        height: 25,
        offset: {
          x: 15,
          y: 15
        }
      }
    }
  };
  level1_1.load([['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'o', 'b'], ['r', 'b', '-', '-', '-', '-', '-', '-', 'r', '-', '-'], ['o', '-', '-', '-', '-', '-', 'x', '-', '-', '-', '-'], ['r', 'c', 'c', 'o', 'p', '-', 'b', 'o', '-', '-', '-'], ['b', 'o', 'r', 'b', 'r', '-', '-', 'r', 'o', '-', 'r']]);
  level1_2.load([['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'], ['b', 'r', 'o', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-', 'r', 'r', 'r', '-', '-', '-'], ['-', '-', '-', '-', 'r', 'r', '-', '-', '-', '-', '-'], ['-', '-', '-', 'r', 'r', 'c', '-', '-', '-', 'r', 'r'], ['o', 'b', '-', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r']]);
  return Kona.Engine.start();
});
