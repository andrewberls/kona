// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Kona.ready(function() {
    var AnimTester, animationScene, fakeObj, tester;
    Kona.Canvas.init('canvas');
    animationScene = new Kona.Scene({
      name: 'animationScene',
      active: true
    });
    Kona.Engine.start();
    fakeObj = {
      'testMethod': function() {
        return "Hello!";
      }
    };
    AnimTester = (function(_super) {
      __extends(AnimTester, _super);

      function AnimTester() {
        return AnimTester.__super__.constructor.apply(this, arguments);
      }

      AnimTester.group = 'anim_testers';

      return AnimTester;

    })(Kona.Entity);
    AnimTester.loadAnimations({
      'one': {
        sheet: 'fake/one.png',
        next: 'two',
        active: true
      },
      'two': {
        sheet: 'fake/two.png',
        next: fakeObj.testMethod
      }
    });
    tester = new AnimTester({
      x: 0,
      y: 0
    });
    animationScene.addEntity(tester);
    return describe("Kona.Animation", function() {
      return describe("#triggerNext", function() {
        var one, two;
        beforeEach(function() {
          return spyOn(fakeObj, 'testMethod');
        });
        one = tester.animations['one'];
        two = tester.animations['two'];
        it("sets animation to @next when string", function() {
          expect(tester.currentAnimation).toBe(one);
          one.reset();
          return expect(tester.currentAnimation).toBe(two);
        });
        return it("calls @next when function", function() {});
      });
    });
  });

}).call(this);
