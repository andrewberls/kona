// Generated by CoffeeScript 1.8.0
(function() {
  Kona.ready(function() {
    describe("Kona.Utils", function() {
      describe("::find", function() {
        var cars;
        cars = [
          {
            color: 'red',
            owner: 'Jon'
          }, {
            color: 'green',
            owner: 'Jane'
          }, {
            color: 'red',
            owner: 'Bob'
          }
        ];
        it("returns first match", function() {
          return expect(Kona.Utils.find(cars, {
            'color': 'red'
          })).toEqual({
            color: 'red',
            owner: 'Jon'
          });
        });
        return it("returns null if no match found", function() {
          return expect(Kona.Utils.find(cars, {
            'color': 'yellow'
          })).toBe(null);
        });
      });
      describe("::merge", function() {
        it("gives precedence to obj2", function() {
          var obj1, obj2;
          obj1 = {
            'a': 100,
            'b': 200
          };
          obj2 = {
            'b': 254,
            'c': 300
          };
          return expect(Kona.Utils.merge(obj1, obj2)).toEqual({
            'a': 100,
            'b': 254,
            'c': 300
          });
        });
        return it("gives precedence to obj1 when overwrite is false", function() {
          var obj1, obj2;
          obj1 = {
            'a': 100,
            'b': 200
          };
          obj2 = {
            'b': 254,
            'c': 300
          };
          return expect(Kona.Utils.merge(obj1, obj2, false)).toEqual({
            'a': 100,
            'b': 200,
            'c': 300
          });
        });
      });
      return describe("::sample", function() {
        return it("picks an element at random", function() {
          var arr;
          arr = [1, 2, 3, 4];
          return expect([1, 2, 3, 4]).toContain(Kona.Utils.sample(arr));
        });
      });
    });
    describe("fail", function() {
      return it("throws an exception", function() {
        return expect(function() {
          return fail("message");
        }).toThrow();
      });
    });
    return describe("once", function() {
      return it("only calls the function once", function() {
        var foo, num, _i;
        foo = {
          bar: function() {
            return "Hello World!";
          }
        };
        spyOn(foo, 'bar');
        for (num = _i = 1; _i <= 10; num = ++_i) {
          once(function() {
            return foo.bar();
          });
        }
        return expect(foo.bar.calls.length).toEqual(1);
      });
    });
  });

}).call(this);
