// Generated by CoffeeScript 1.3.3
(function() {

  Kona.ready(function() {
    return describe("Kona.Store", function() {
      describe("#set/#get", function() {
        it("sets values correctly", function() {
          var store;
          store = new Kona.Store();
          expect(store.get('myKey')).toEqual([]);
          return expect(store.set('myKey', 'myVal1')).toEqual(['myVal1']);
        });
        return it("returns the value at the key set", function() {
          var store;
          store = new Kona.Store();
          expect(store.set('myKey', 'myVal1')).toEqual(['myVal1']);
          return expect(store.set('myKey', 'myVal2')).toEqual(['myVal1', 'myVal2']);
        });
      });
      describe("#get", function() {
        it("gets values correctly", function() {
          var store;
          store = new Kona.Store();
          expect(store.get('myKey')).toEqual([]);
          store.set('myKey', 'myVal1');
          expect(store.get('myKey')).toEqual(['myVal1']);
          store.set('myKey', 'myVal2');
          expect(store.get('myKey')).toEqual(['myVal1', 'myVal2']);
          store.set('otherKey', 2);
          return expect(store.get('otherKey')).toEqual([2]);
        });
        it("returns empty array for blank key", function() {
          var store;
          store = new Kona.Store();
          return expect(store.get('fakeKey')).toEqual([]);
        });
        return it("concatenates values for multiple keys", function() {
          var store;
          store = new Kona.Store();
          store.set('myKey', 'myVal1');
          store.set('myKey', 'myVal2');
          store.set('otherKey', 'otherVal');
          expect(store.get('myKey', 'otherKey')).toEqual(['myVal1', 'myVal2', 'otherVal']);
          return expect(store.get('myKey', 'fakeKey')).toEqual(['myVal1', 'myVal2']);
        });
      });
      describe("#all", function() {
        return it("returns the internal store", function() {
          var store;
          store = new Kona.Store();
          store.set('myKey', 'myVal1');
          store.set('myKey', 'myVal2');
          store.set('otherKey', 'otherVal');
          return expect(store.all()).toEqual({
            'myKey': ['myVal1', 'myVal2'],
            'otherKey': ['otherVal']
          });
        });
      });
      return describe("#concat", function() {
        return it("returns the concatenated entire store", function() {
          var store;
          store = new Kona.Store();
          store.set('myKey', 'myVal1');
          store.set('myKey', 'myVal2');
          store.set('otherKey', 'otherVal');
          store.set('anotherKey', 'anotherVal');
          return expect(store.concat()).toEqual(['myVal1', 'myVal2', 'otherVal', 'anotherVal']);
        });
      });
    });
  });

}).call(this);
