(function() {
  var Coffee, Coin, Effect, Elevator, Enemy, Espresso, HealthPowerup, Paces, Pill, Pistol, PistolProj, Player, PlayerWeapon, Resets, Rifle, RifleProj, Sign, SignBackground, Spring, Strogg, StroggPistol, StroggProj, Turtle, player,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Resets = {
    resetAnimation: function() {
      if (this.direction.dx !== 0) {
        return this.setAnimation("run_" + this.facing);
      } else {
        return this.setAnimation("idle_" + this.facing);
      }
    }
  };

  Paces = {
    reverse: _.throttle(function() {
      return this.direction.dx *= -1;
    }, 3000),
    pace: function() {
      if (this.isAlive) {
        if (_.random(1, 100) === 1 || this.left() < 0 || this.right() > Kona.Canvas.width) {
          this.reverse();
        }
        return this.setAnimation("run_" + this.facing);
      }
    }
  };

  PlayerWeapon = (function(_super) {

    __extends(PlayerWeapon, _super);

    function PlayerWeapon() {
      return PlayerWeapon.__super__.constructor.apply(this, arguments);
    }

    PlayerWeapon.prototype.fire = function() {
      var startX;
      if (this.canFire) {
        this.holder.setAnimation("fire_" + this.holder.facing);
        startX = this.holder.facing === 'right' ? this.holder.right() + 2 : this.holder.left() - 17;
        Kona.Scenes.currentScene.addEntity(new Effect({
          x: startX,
          y: this.holder.top() + 2,
          duration: 30,
          sprite: this.effect()
        }));
      }
      return PlayerWeapon.__super__.fire.call(this);
    };

    return PlayerWeapon;

  })(Kona.Weapon);

  Pistol = (function(_super) {

    __extends(Pistol, _super);

    Pistol.group = 'weapons';

    function Pistol(opts) {
      if (opts == null) {
        opts = {};
      }
      Pistol.__super__.constructor.call(this, opts);
      this.recharge = 500;
      this.projType = PistolProj;
      this.projSound = 'player_fire';
      this.pickupSound = 'weapon_pickup';
    }

    Pistol.prototype.effect = function() {
      return "img/effects/rifle_fire_" + this.holder.facing + ".png";
    };

    return Pistol;

  })(PlayerWeapon);

  PistolProj = (function(_super) {

    __extends(PistolProj, _super);

    function PistolProj(opts) {
      if (opts == null) {
        opts = {};
      }
      PistolProj.__super__.constructor.call(this, opts);
      this.sprite.src = 'img/weapons/bullet_1.png';
      this.box = {
        width: 20,
        height: 7
      };
      this.destructibles = ['enemies'];
    }

    return PistolProj;

  })(Kona.Projectile);

  Rifle = (function(_super) {

    __extends(Rifle, _super);

    function Rifle(opts) {
      if (opts == null) {
        opts = {};
      }
      Rifle.__super__.constructor.call(this, opts);
      this.recharge = 500;
      this.projType = RifleProj;
      this.projSound = 'player_fire';
      this.pickupSound = 'weapon_pickup';
    }

    Rifle.prototype.effect = function() {
      return "img/effects/rifle_fire_" + this.holder.facing + ".png";
    };

    return Rifle;

  })(PlayerWeapon);

  RifleProj = (function(_super) {

    __extends(RifleProj, _super);

    function RifleProj(opts) {
      if (opts == null) {
        opts = {};
      }
      RifleProj.__super__.constructor.call(this, opts);
      this.sprite.src = 'img/weapons/bullet_2.jpg';
      this.destructibles = ['enemies'];
    }

    return RifleProj;

  })(Kona.Projectile);

  Player = (function(_super) {

    __extends(Player, _super);

    Player.group = 'player';

    function Player(opts) {
      if (opts == null) {
        opts = {};
      }
      Player.__super__.constructor.call(this, opts);
      this.speed = 3;
      this.jumpHeight = 22;
      this.jumpDuration = 180;
      this.isJumping = false;
      this.facing = 'right';
      this.canFire = false;
      this.currentWeapon = null;
      this.isAlive = true;
      this.maxHealth = 3;
      this.health = this.maxHealth;
      this.lives = 3;
      this.score = 0;
      this.collects('weapons', 'health', 'coins');
      this.triggers('signs', 'springs', 'elevators');
      this.include(Resets, Paces);
    }

    Player.prototype.update = function() {
      Player.__super__.update.call(this);
      if (this.isJumping) {
        this.position.y -= this.jumpHeight;
        this.correctTop();
      }
      if (this.top() > Kona.Canvas.height) {
        this.die();
      }
      if (this.right() > Kona.Canvas.width - 20) {
        Kona.Scenes.nextScene();
        return this.setPosition(0, this.top());
      }
    };

    Player.prototype.stop = function(axis) {
      if (this.isAlive) {
        this.setAnimation("idle_" + this.facing);
        return Player.__super__.stop.call(this, axis);
      }
    };

    Player.prototype.setDirection = function(dir) {
      if (this.isAlive && !Kona.gamePaused) {
        this.direction.dx = dir === 'left' ? -1 : 1;
        return this.setAnimation("run_" + dir);
      }
    };

    Player.prototype.jump = function(opts) {
      var canJump, duration, oldHeight,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      duration = opts.duration || this.jumpDuration;
      if (opts.height != null) {
        oldHeight = this.jumpHeight;
        this.jumpHeight = opts.height;
      }
      canJump = !this.isJumping && !Kona.gamePaused && this.onSurface();
      if (opts.force === true || canJump) {
        this.isJumping = true;
        this.position.y -= 25;
        return setTimeout(function() {
          _this.isJumping = false;
          _this.resetAnimation();
          if (oldHeight != null) {
            return _this.jumpHeight = oldHeight;
          }
        }, duration);
      }
    };

    Player.prototype.fire = function() {
      if ((this.currentWeapon != null) && !Kona.gamePaused) {
        return this.currentWeapon.fire();
      }
    };

    Player.prototype.hit = function(dir) {
      if (this.isAlive) {
        this.health--;
        console.log("player hit, " + this.health + " hp remaining");
        if (this.health <= 0) {
          return this.die();
        } else {
          return Kona.Sounds.play('player_hit');
        }
      }
    };

    Player.prototype.die = function(dir) {
      if (dir == null) {
        dir = 'right';
      }
      if (this.isAlive) {
        this.stop();
        this.isAlive = false;
        this.lives--;
        Kona.Sounds.play('player_die');
        if (this.lives <= 0) {
          return console.log("Game over");
        } else {
          return this.setAnimation("die_right");
        }
      }
    };

    Player.prototype.reset = function() {
      this.facing = 'right';
      this.resetAnimation();
      this.setPosition(195, 200);
      this.health = this.maxHealth;
      return this.isAlive = true;
    };

    return Player;

  })(Kona.Entity);

  Effect = (function(_super) {

    __extends(Effect, _super);

    Effect.group = 'effects';

    function Effect(opts) {
      var _this = this;
      if (opts == null) {
        opts = {};
      }
      Effect.__super__.constructor.call(this, opts);
      this.solid = false;
      this.duration = opts.duration || fail("Effect#new", "Effect must have a duration");
      setTimeout(function() {
        return _this.destroy();
      }, this.duration);
    }

    Effect.prototype.update = function() {};

    return Effect;

  })(Kona.Entity);

  HealthPowerup = (function(_super) {

    __extends(HealthPowerup, _super);

    function HealthPowerup() {
      return HealthPowerup.__super__.constructor.apply(this, arguments);
    }

    HealthPowerup.prototype.value = 0;

    HealthPowerup.prototype.activate = function(collector) {
      HealthPowerup.__super__.activate.apply(this, arguments);
      console.log("got " + this.value + " health");
      return collector.health += this.value;
    };

    return HealthPowerup;

  })(Kona.Collectable);

  Coffee = (function(_super) {

    __extends(Coffee, _super);

    Coffee.prototype.value = 10;

    function Coffee(opts) {
      if (opts == null) {
        opts = {};
      }
      Coffee.__super__.constructor.call(this, opts);
      this.pickupSound = 'coffee';
    }

    return Coffee;

  })(HealthPowerup);

  Espresso = (function(_super) {

    __extends(Espresso, _super);

    Espresso.prototype.value = 15;

    function Espresso(opts) {
      if (opts == null) {
        opts = {};
      }
      Espresso.__super__.constructor.call(this, opts);
      this.pickupSound = '';
    }

    return Espresso;

  })(HealthPowerup);

  Pill = (function(_super) {

    __extends(Pill, _super);

    Pill.prototype.value = 20;

    function Pill(opts) {
      if (opts == null) {
        opts = {};
      }
      Pill.__super__.constructor.call(this, opts);
      this.pickupSound = 'pills';
    }

    return Pill;

  })(HealthPowerup);

  Coin = (function(_super) {

    __extends(Coin, _super);

    Coin.prototype.value = 10;

    function Coin(opts) {
      if (opts == null) {
        opts = {};
      }
      Coin.__super__.constructor.call(this, opts);
      this.pickupSound = ['coin1', 'coin2'];
    }

    Coin.prototype.activate = function(collector) {
      Coin.__super__.activate.apply(this, arguments);
      console.log("got " + this.value + " score");
      return collector.score += this.value;
    };

    return Coin;

  })(Kona.Collectable);

  SignBackground = (function(_super) {

    __extends(SignBackground, _super);

    SignBackground.group = 'sign_backgrounds';

    function SignBackground(opts) {
      if (opts == null) {
        opts = {};
      }
      SignBackground.__super__.constructor.call(this, opts);
      this.gravity = false;
      this.solid = false;
    }

    SignBackground.prototype.update = function() {};

    return SignBackground;

  })(Kona.Entity);

  Sign = (function(_super) {

    __extends(Sign, _super);

    Sign.group = 'signs';

    function Sign(opts) {
      if (opts == null) {
        opts = {};
      }
      Sign.__super__.constructor.call(this, opts);
      this.popupOpts = opts.popupOpts || {};
      this.seen = false;
    }

    Sign.prototype.showPopup = function() {
      Kona.togglePause();
      this.background = new SignBackground(this.popupOpts);
      return Kona.Scenes.currentScene.addEntity(this.background);
    };

    Sign.prototype.activate = function(ent) {
      if (!this.seen) {
        this.showPopup();
        return this.seen = true;
      }
    };

    return Sign;

  })(Kona.Trigger);

  Kona.onResume(function() {
    var ent, _i, _len, _ref, _results;
    _ref = Kona.Scenes.getCurrentEntities('sign_backgrounds');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ent = _ref[_i];
      _results.push(ent.destroy());
    }
    return _results;
  });

  Spring = (function(_super) {

    __extends(Spring, _super);

    Spring.group = 'springs';

    function Spring(opts) {
      if (opts == null) {
        opts = {};
      }
      Spring.__super__.constructor.call(this, opts);
      this.tolerance = 4;
      this.pickupSound = 'spring';
    }

    Spring.prototype.activate = function(ent) {
      Spring.__super__.activate.call(this);
      ent.position.y -= 20;
      return ent.jump({
        duration: 180,
        height: 30,
        force: true
      });
    };

    Spring.prototype.withinTolerance = function(ent) {
      return ent.bottom() >= this.top() - this.tolerance && ent.bottom() <= this.top() + this.tolerance && !ent.isJumping;
    };

    return Spring;

  })(Kona.Trigger);

  Elevator = (function(_super) {

    __extends(Elevator, _super);

    Elevator.group = 'elevators';

    function Elevator(opts) {
      if (opts == null) {
        opts = {};
      }
      Elevator.__super__.constructor.call(this, opts);
      this.solid = true;
      this.speed || (this.speed = 3);
      this.pickupSound = '';
      this.isAscending = false;
      this.isDescending = false;
      this.minHeight = this.top();
      this.maxHeight = opts.maxHeight;
      this.maxStay = opts.maxStay || 150;
      this.topDuration = 0;
      this.tolerance = 4;
    }

    Elevator.prototype.atTop = function() {
      return this.top() <= this.maxHeight;
    };

    Elevator.prototype.atBottom = function() {
      return this.top() >= this.minHeight;
    };

    Elevator.prototype.withinTolerance = function(ent) {
      return ent.bottom() >= this.top() - this.tolerance && ent.bottom() <= this.top() + this.tolerance;
    };

    Elevator.prototype.update = function() {
      var ent, _i, _len, _ref, _results;
      if (this.atTop()) {
        if (this.topDuration >= this.maxStay) {
          this.isDescending = true;
        } else {
          this.isAscending = this.isDescending = false;
          this.topDuration++;
        }
      }
      if (this.atBottom() && this.topDuration !== 0) {
        this.topDuration = 0;
        return this.isAscending = this.isDescending = false;
      } else if (this.isDescending && !this.atBottom()) {
        return this.position.y += this.speed;
      } else if (this.isAscending && !this.atTop()) {
        return this.position.y -= this.speed;
      } else {
        _ref = Kona.Collectors["for"](this.group);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ent = _ref[_i];
          if (ent.inColumnSpace(this) && this.withinTolerance(ent) && this.atBottom()) {
            _results.push(this.isAscending = true);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return Elevator;

  })(Kona.Trigger);

  Enemy = (function(_super) {

    __extends(Enemy, _super);

    function Enemy(opts) {
      if (opts == null) {
        opts = {};
      }
      Enemy.__super__.constructor.call(this, opts);
      this.isAlive = true;
      this.speed = 0.5;
      this.include(Resets, Paces);
    }

    Enemy.prototype.hit = function() {
      this.health--;
      if (this.health <= 0) {
        return this.die();
      }
    };

    Enemy.prototype.update = function() {
      if (this.bottomLeftNeighbor() instanceof Kona.BlankTile) {
        this.direction.dx = 1;
      }
      if (this.bottomRightNeighbor() instanceof Kona.BlankTile) {
        this.direction.dx = -1;
      }
      return Enemy.__super__.update.call(this);
    };

    return Enemy;

  })(Kona.Entity);

  Strogg = (function(_super) {

    __extends(Strogg, _super);

    Strogg.group = 'enemies';

    function Strogg(opts) {
      if (opts == null) {
        opts = {};
      }
      Strogg.__super__.constructor.call(this, opts);
      this.box = {
        width: 45,
        height: 59
      };
      this.facing = 'left';
      this.target = 'player';
      this.health = 1;
      this.currentWeapon = new StroggPistol({
        group: 'strogg_weapons',
        holder: this,
        targets: [this.target],
        offset: {
          x: 25,
          y: 25
        }
      });
      this.scene.addEntity(this.currentWeapon);
    }

    Strogg.prototype.update = function() {
      Strogg.__super__.update.call(this);
      return this.pace();
    };

    Strogg.prototype.die = function() {
      this.currentWeapon.destroy();
      return this.destroy();
    };

    return Strogg;

  })(Enemy);

  StroggPistol = (function(_super) {

    __extends(StroggPistol, _super);

    function StroggPistol(opts) {
      var _this = this;
      if (opts == null) {
        opts = {};
      }
      StroggPistol.__super__.constructor.call(this, opts);
      this.recharge = 1000;
      this.projType = StroggProj;
      this.fireLoop = setInterval(function() {
        var target;
        target = _this.randomTarget();
        if (_this.holder.isFacing(target)) {
          return _this.fire(target);
        }
      }, this.recharge);
    }

    StroggPistol.prototype.destroy = function() {
      clearInterval(this.fireLoop);
      return StroggPistol.__super__.destroy.call(this);
    };

    return StroggPistol;

  })(Kona.EnemyWeapon);

  StroggProj = (function(_super) {

    __extends(StroggProj, _super);

    function StroggProj(opts) {
      if (opts == null) {
        opts = {};
      }
      StroggProj.__super__.constructor.call(this, opts);
      this.sprite.src = 'img/weapons/strogg_bullet.png';
    }

    return StroggProj;

  })(Kona.Projectile);

  Turtle = (function(_super) {

    __extends(Turtle, _super);

    Turtle.group = 'enemies';

    function Turtle(opts) {
      if (opts == null) {
        opts = {};
      }
      Turtle.__super__.constructor.call(this, opts);
      this.box = {
        width: 50,
        height: 55
      };
      this.facing = 'left';
      this.direction.dx = -1;
      this.target = 'player';
      this.health = 1;
    }

    Turtle.prototype.update = function() {
      this.checkPlayer();
      Turtle.__super__.update.call(this);
      return this.pace();
    };

    Turtle.prototype.checkPlayer = function() {
      var ent, _i, _len, _ref, _results;
      _ref = Kona.Scenes.getCurrentEntities(this.target);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ent = _ref[_i];
        if (this.topCollision(ent)) {
          _results.push(this.die());
        } else if (this.leftCollision(ent)) {
          ent.hit();
          _results.push(ent.position.x -= 75);
        } else if (this.rightCollision(ent)) {
          ent.hit();
          _results.push(ent.position.x += 75);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Turtle.prototype.die = function() {
      this.isAlive = false;
      this.stop();
      Kona.Sounds.play('turtle_die');
      return this.setAnimation('die');
    };

    return Turtle;

  })(Enemy);

  Kona.Sounds.load('audio/', {
    'player_hit': 'player_hit1.mp3',
    'player_die': 'player_die2.mp3',
    'turtle_die': 'turtle_die.mp3',
    'weapon_pickup': 'weapon_pickup.mp3',
    'enemy_fire': 'enemy_fire.ogg',
    'player_fire': 'player_fire.mp3',
    'coin1': 'coin1.mp3',
    'coin2': 'coin2.mp3',
    'coffee': 'coffee.mp3',
    'pills': 'pills.mp3',
    'spring': 'spring.mp3'
  });

  Kona.Canvas.init('canvas');

  player = new Player({
    x: 30,
    y: 10,
    width: 55,
    height: 65,
    persistent: true
  });

  Player.loadAnimations({
    'idle_right': {
      sheet: 'img/player/idle_right.png',
      active: true
    },
    'idle_left': {
      sheet: 'img/player/idle_left.png'
    },
    'run_right': {
      sheet: 'img/player/run_right.png'
    },
    'run_left': {
      sheet: 'img/player/run_left.png'
    },
    'fire_right': {
      sheet: 'img/player/fire_right.png',
      next: function() {
        return this.entity.resetAnimation();
      }
    },
    'fire_left': {
      sheet: 'img/player/fire_left.png',
      next: function() {
        return this.entity.resetAnimation();
      }
    },
    'die_right': {
      sheet: 'img/player/die_right.png',
      width: 70,
      height: 65,
      next: function() {
        return this.entity.reset();
      }
    }
  });

  Kona.Scenes.currentScene.addEntity(player);

  Strogg.loadAnimations({
    'idle_left': {
      sheet: 'img/enemies/strogg/idle_left.png'
    },
    'idle_right': {
      sheet: 'img/enemies/strogg/idle_right.png'
    },
    'run_left': {
      sheet: 'img/enemies/strogg/run_left.png'
    },
    'run_right': {
      sheet: 'img/enemies/strogg/run_right.png',
      active: true
    }
  });

  Turtle.loadAnimations({
    'run_right': {
      sheet: 'img/enemies/turtle/run_right.png',
      active: true
    },
    'run_left': {
      sheet: 'img/enemies/turtle/run_left.png'
    },
    'die': {
      sheet: 'img/enemies/turtle/die.png',
      next: function() {
        return this.entity.destroy();
      }
    }
  });

  Kona.Keys.keydown = function(key) {
    switch (key) {
      case 'left':
        return player.setDirection('left');
      case 'right':
        return player.setDirection('right');
      case 'up':
        return player.jump();
      case 'space':
        return player.fire();
      case 'esc':
        return Kona.togglePause();
    }
  };

  Kona.Keys.keyup = function(key) {
    switch (key) {
      case 'left':
      case 'right':
        return player.stop('x');
      case 'up':
      case 'down':
        return player.stop('y');
    }
  };

  Kona.Scenes.loadDefinitions([
    {
      'level-1': {
        '--': {
          entity: Kona.BlankTile
        },
        'tl': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/topl.png'
          }
        },
        'tv': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/topv.png'
          }
        },
        'tc': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/topc.png'
          }
        },
        'tr': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/topr.png'
          }
        },
        'm1': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/mid1.png'
          }
        },
        'm2': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/mid2.png'
          }
        },
        'm3': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/mid3.png'
          }
        },
        'm4': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/mid4.png'
          }
        },
        'b1': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/base1.png'
          }
        },
        'b2': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/base2.png'
          }
        },
        'b3': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/base3.png'
          }
        },
        'b4': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/base4.png'
          }
        },
        'f1': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/floor1.png'
          }
        },
        'f2': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/floor2.png'
          }
        },
        'f3': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/floor3.png'
          }
        },
        'pl': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/pl.png'
          }
        },
        'p1': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/pc1.png'
          }
        },
        'p2': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/pc2.png'
          }
        },
        'pr': {
          entity: Kona.Tile,
          opts: {
            sprite: 'img/tiles/dirt/pr.png'
          }
        },
        'xs': {
          entity: Strogg,
          opts: {
            offset: {
              y: 0
            },
            dx: -1,
            sprite: 'img/enemies/strogg/idle_right.png'
          }
        },
        'xT': {
          entity: Turtle,
          opts: {
            sprite: 'img/enemies/turtle/idle_right.png'
          }
        },
        'cc': {
          group: 'coins',
          entity: Coin,
          opts: {
            offset: {
              x: 20,
              y: 20
            },
            sprite: 'img/powerups/coin.png'
          }
        },
        'mm': {
          group: 'health',
          entity: Coffee,
          opts: {
            offset: {
              x: 15,
              y: 15
            },
            sprite: 'img/powerups/mug.png'
          }
        },
        'ee': {
          group: 'health',
          entity: Espresso,
          opts: {
            offset: {
              x: 15,
              y: 15
            },
            sprite: 'img/powerups/espresso.png'
          }
        },
        'CC': {
          group: 'health',
          entity: Pill,
          opts: {
            offset: {
              x: 15,
              y: 15
            },
            sprite: 'img/powerups/pill.png'
          }
        },
        'pp': {
          entity: Pistol,
          opts: {
            offset: {
              x: 15,
              y: 0
            },
            sprite: 'img/weapons/pistol2.png'
          }
        },
        'RR': {
          entity: Pistol,
          opts: {
            offset: {
              x: 0,
              y: 0
            },
            sprite: 'img/weapons/rifle.png'
          }
        },
        'Ts': {
          entity: Spring,
          opts: {
            offset: {
              y: 31
            },
            sprite: 'img/spring_60_3.png'
          }
        },
        'Te': {
          entity: Elevator,
          opts: {
            sprite: ''
          }
        }
      }
    }
  ]);

  Kona.Scenes.loadScenes([
    {
      map: 'level-1',
      background: 'img/backgrounds/lvl2.jpg',
      entities: [['--', '--', '--', '--', '--', '--', '--', '--', '--', 'b1', '--', '--'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--'], ['--', '--', '--', 'mm', '--', '--', '--', '--', 'cc', 'cc', 'cc', '--'], ['tv', 'f2', 'f3', 'f3', '--', '--', 'f3', 'f2', 'f1', 'f3', 'f2', 'f1'], ['m2', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--'], ['m2', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--'], ['m2', '--', '--', '--', 'tl', 'tr', '--', '--', '--', '--', '--', '--'], ['m2', 'cc', 'cc', 'tc', 'm1', 'm3', 'tc', 'tr', '--', '--', 'xT', '--'], ['b2', 'f1', 'f2', 'b1', 'b3', 'b4', 'b1', 'b3', 'f1', 'f3', 'f2', 'f1']]
    }, {
      map: 'level-1',
      background: 'img/backgrounds/lvl2.jpg',
      entities: [['--', '--', '--', '--', '--', '--', '--', '--', '--', 'm2', '--', '--'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', 'm2', '--', '--'], ['--', '--', '--', '--', '--', '--', 'xs', 'cc', 'cc', 'm1', '--', '--'], ['tc', 'tr', '--', '--', '--', '--', 'tr', 'tc', 'tc', 'm3', '--', 'tl'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', 'm4', '--', 'm3'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', 'b1', '--', 'm4'], ['--', '--', '--', '--', '--', 'Ts', '--', '--', '--', '--', '--', 'm3'], ['--', 'pp', '--', 'xT', 'tl', 'tc', 'tr', '--', '--', '--', '--', 'm1'], ['f1', 'f3', 'f2', 'f1', 'b4', 'b3', 'b1', 'f3', 'f1', 'f3', 'b1', 'b4']]
    }, {
      map: 'level-1',
      background: 'img/backgrounds/lvl2.jpg',
      entities: [['--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', 'pl'], ['p1', 'p2', 'pr', '--', '--', '--', '--', '--', 'pl', 'pr', '--', '--'], ['--', '--', '--', '--', '--', 'xs', 'cc', '--', '--', '--', '--', '--'], ['--', '--', '--', '--', 'pl', 'p1', 'pr', '--', '--', 'xT', 'mm', '--'], ['--', '--', '--', '--', '--', '--', '--', '--', 'pl', 'p2', 'pr', '--'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--'], ['--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--']]
    }
  ]);

  Kona.Scenes.find("s2").addEntity(new Elevator({
    width: 60,
    height: 60,
    x: 600,
    y: 480,
    maxHeight: 180,
    sprite: 'img/plate_4.png'
  }));

  Kona.Events.on("s1_activate", function() {
    return console.log("s1 activated");
  });

  Kona.Events.on("s2_activate", function() {
    return console.log("s2 activated");
  });

  Kona.Engine.start();

}).call(this);
